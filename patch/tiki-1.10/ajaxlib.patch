diff -Naur lib/ajax/LICENSE.txt lib/ajax/LICENSE.txt
--- lib/ajax/LICENSE.txt	1969-12-31 21:00:00.000000000 -0300
+++ lib/ajax/LICENSE.txt	2006-05-29 18:47:50.000000000 -0300
@@ -0,0 +1,504 @@
+		  GNU LESSER GENERAL PUBLIC LICENSE
+		       Version 2.1, February 1999
+
+ Copyright (C) 1991, 1999 Free Software Foundation, Inc.
+     51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+[This is the first released version of the Lesser GPL.  It also counts
+ as the successor of the GNU Library Public License, version 2, hence
+ the version number 2.1.]
+
+			    Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+Licenses are intended to guarantee your freedom to share and change
+free software--to make sure the software is free for all its users.
+
+  This license, the Lesser General Public License, applies to some
+specially designated software packages--typically libraries--of the
+Free Software Foundation and other authors who decide to use it.  You
+can use it too, but we suggest you first think carefully about whether
+this license or the ordinary General Public License is the better
+strategy to use in any particular case, based on the explanations below.
+
+  When we speak of free software, we are referring to freedom of use,
+not price.  Our General Public Licenses are designed to make sure that
+you have the freedom to distribute copies of free software (and charge
+for this service if you wish); that you receive source code or can get
+it if you want it; that you can change the software and use pieces of
+it in new free programs; and that you are informed that you can do
+these things.
+
+  To protect your rights, we need to make restrictions that forbid
+distributors to deny you these rights or to ask you to surrender these
+rights.  These restrictions translate to certain responsibilities for
+you if you distribute copies of the library or if you modify it.
+
+  For example, if you distribute copies of the library, whether gratis
+or for a fee, you must give the recipients all the rights that we gave
+you.  You must make sure that they, too, receive or can get the source
+code.  If you link other code with the library, you must provide
+complete object files to the recipients, so that they can relink them
+with the library after making changes to the library and recompiling
+it.  And you must show them these terms so they know their rights.
+
+  We protect your rights with a two-step method: (1) we copyright the
+library, and (2) we offer you this license, which gives you legal
+permission to copy, distribute and/or modify the library.
+
+  To protect each distributor, we want to make it very clear that
+there is no warranty for the free library.  Also, if the library is
+modified by someone else and passed on, the recipients should know
+that what they have is not the original version, so that the original
+author's reputation will not be affected by problems that might be
+introduced by others.
+
+  Finally, software patents pose a constant threat to the existence of
+any free program.  We wish to make sure that a company cannot
+effectively restrict the users of a free program by obtaining a
+restrictive license from a patent holder.  Therefore, we insist that
+any patent license obtained for a version of the library must be
+consistent with the full freedom of use specified in this license.
+
+  Most GNU software, including some libraries, is covered by the
+ordinary GNU General Public License.  This license, the GNU Lesser
+General Public License, applies to certain designated libraries, and
+is quite different from the ordinary General Public License.  We use
+this license for certain libraries in order to permit linking those
+libraries into non-free programs.
+
+  When a program is linked with a library, whether statically or using
+a shared library, the combination of the two is legally speaking a
+combined work, a derivative of the original library.  The ordinary
+General Public License therefore permits such linking only if the
+entire combination fits its criteria of freedom.  The Lesser General
+Public License permits more lax criteria for linking other code with
+the library.
+
+  We call this license the "Lesser" General Public License because it
+does Less to protect the user's freedom than the ordinary General
+Public License.  It also provides other free software developers Less
+of an advantage over competing non-free programs.  These disadvantages
+are the reason we use the ordinary General Public License for many
+libraries.  However, the Lesser license provides advantages in certain
+special circumstances.
+
+  For example, on rare occasions, there may be a special need to
+encourage the widest possible use of a certain library, so that it becomes
+a de-facto standard.  To achieve this, non-free programs must be
+allowed to use the library.  A more frequent case is that a free
+library does the same job as widely used non-free libraries.  In this
+case, there is little to gain by limiting the free library to free
+software only, so we use the Lesser General Public License.
+
+  In other cases, permission to use a particular library in non-free
+programs enables a greater number of people to use a large body of
+free software.  For example, permission to use the GNU C Library in
+non-free programs enables many more people to use the whole GNU
+operating system, as well as its variant, the GNU/Linux operating
+system.
+
+  Although the Lesser General Public License is Less protective of the
+users' freedom, it does ensure that the user of a program that is
+linked with the Library has the freedom and the wherewithal to run
+that program using a modified version of the Library.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.  Pay close attention to the difference between a
+"work based on the library" and a "work that uses the library".  The
+former contains code derived from the library, whereas the latter must
+be combined with the library in order to run.
+
+		  GNU LESSER GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License Agreement applies to any software library or other
+program which contains a notice placed by the copyright holder or
+other authorized party saying it may be distributed under the terms of
+this Lesser General Public License (also called "this License").
+Each licensee is addressed as "you".
+
+  A "library" means a collection of software functions and/or data
+prepared so as to be conveniently linked with application programs
+(which use some of those functions and data) to form executables.
+
+  The "Library", below, refers to any such software library or work
+which has been distributed under these terms.  A "work based on the
+Library" means either the Library or any derivative work under
+copyright law: that is to say, a work containing the Library or a
+portion of it, either verbatim or with modifications and/or translated
+straightforwardly into another language.  (Hereinafter, translation is
+included without limitation in the term "modification".)
+
+  "Source code" for a work means the preferred form of the work for
+making modifications to it.  For a library, complete source code means
+all the source code for all modules it contains, plus any associated
+interface definition files, plus the scripts used to control compilation
+and installation of the library.
+
+  Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running a program using the Library is not restricted, and output from
+such a program is covered only if its contents constitute a work based
+on the Library (independent of the use of the Library in a tool for
+writing it).  Whether that is true depends on what the Library does
+and what the program that uses the Library does.
+  
+  1. You may copy and distribute verbatim copies of the Library's
+complete source code as you receive it, in any medium, provided that
+you conspicuously and appropriately publish on each copy an
+appropriate copyright notice and disclaimer of warranty; keep intact
+all the notices that refer to this License and to the absence of any
+warranty; and distribute a copy of this License along with the
+Library.
+
+  You may charge a fee for the physical act of transferring a copy,
+and you may at your option offer warranty protection in exchange for a
+fee.
+
+  2. You may modify your copy or copies of the Library or any portion
+of it, thus forming a work based on the Library, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) The modified work must itself be a software library.
+
+    b) You must cause the files modified to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    c) You must cause the whole of the work to be licensed at no
+    charge to all third parties under the terms of this License.
+
+    d) If a facility in the modified Library refers to a function or a
+    table of data to be supplied by an application program that uses
+    the facility, other than as an argument passed when the facility
+    is invoked, then you must make a good faith effort to ensure that,
+    in the event an application does not supply such function or
+    table, the facility still operates, and performs whatever part of
+    its purpose remains meaningful.
+
+    (For example, a function in a library to compute square roots has
+    a purpose that is entirely well-defined independent of the
+    application.  Therefore, Subsection 2d requires that any
+    application-supplied function or table used by this function must
+    be optional: if the application does not supply it, the square
+    root function must still compute square roots.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Library,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Library, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote
+it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Library.
+
+In addition, mere aggregation of another work not based on the Library
+with the Library (or with a work based on the Library) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may opt to apply the terms of the ordinary GNU General Public
+License instead of this License to a given copy of the Library.  To do
+this, you must alter all the notices that refer to this License, so
+that they refer to the ordinary GNU General Public License, version 2,
+instead of to this License.  (If a newer version than version 2 of the
+ordinary GNU General Public License has appeared, then you can specify
+that version instead if you wish.)  Do not make any other change in
+these notices.
+
+  Once this change is made in a given copy, it is irreversible for
+that copy, so the ordinary GNU General Public License applies to all
+subsequent copies and derivative works made from that copy.
+
+  This option is useful when you wish to copy part of the code of
+the Library into a program that is not a library.
+
+  4. You may copy and distribute the Library (or a portion or
+derivative of it, under Section 2) in object code or executable form
+under the terms of Sections 1 and 2 above provided that you accompany
+it with the complete corresponding machine-readable source code, which
+must be distributed under the terms of Sections 1 and 2 above on a
+medium customarily used for software interchange.
+
+  If distribution of object code is made by offering access to copy
+from a designated place, then offering equivalent access to copy the
+source code from the same place satisfies the requirement to
+distribute the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  5. A program that contains no derivative of any portion of the
+Library, but is designed to work with the Library by being compiled or
+linked with it, is called a "work that uses the Library".  Such a
+work, in isolation, is not a derivative work of the Library, and
+therefore falls outside the scope of this License.
+
+  However, linking a "work that uses the Library" with the Library
+creates an executable that is a derivative of the Library (because it
+contains portions of the Library), rather than a "work that uses the
+library".  The executable is therefore covered by this License.
+Section 6 states terms for distribution of such executables.
+
+  When a "work that uses the Library" uses material from a header file
+that is part of the Library, the object code for the work may be a
+derivative work of the Library even though the source code is not.
+Whether this is true is especially significant if the work can be
+linked without the Library, or if the work is itself a library.  The
+threshold for this to be true is not precisely defined by law.
+
+  If such an object file uses only numerical parameters, data
+structure layouts and accessors, and small macros and small inline
+functions (ten lines or less in length), then the use of the object
+file is unrestricted, regardless of whether it is legally a derivative
+work.  (Executables containing this object code plus portions of the
+Library will still fall under Section 6.)
+
+  Otherwise, if the work is a derivative of the Library, you may
+distribute the object code for the work under the terms of Section 6.
+Any executables containing that work also fall under Section 6,
+whether or not they are linked directly with the Library itself.
+
+  6. As an exception to the Sections above, you may also combine or
+link a "work that uses the Library" with the Library to produce a
+work containing portions of the Library, and distribute that work
+under terms of your choice, provided that the terms permit
+modification of the work for the customer's own use and reverse
+engineering for debugging such modifications.
+
+  You must give prominent notice with each copy of the work that the
+Library is used in it and that the Library and its use are covered by
+this License.  You must supply a copy of this License.  If the work
+during execution displays copyright notices, you must include the
+copyright notice for the Library among them, as well as a reference
+directing the user to the copy of this License.  Also, you must do one
+of these things:
+
+    a) Accompany the work with the complete corresponding
+    machine-readable source code for the Library including whatever
+    changes were used in the work (which must be distributed under
+    Sections 1 and 2 above); and, if the work is an executable linked
+    with the Library, with the complete machine-readable "work that
+    uses the Library", as object code and/or source code, so that the
+    user can modify the Library and then relink to produce a modified
+    executable containing the modified Library.  (It is understood
+    that the user who changes the contents of definitions files in the
+    Library will not necessarily be able to recompile the application
+    to use the modified definitions.)
+
+    b) Use a suitable shared library mechanism for linking with the
+    Library.  A suitable mechanism is one that (1) uses at run time a
+    copy of the library already present on the user's computer system,
+    rather than copying library functions into the executable, and (2)
+    will operate properly with a modified version of the library, if
+    the user installs one, as long as the modified version is
+    interface-compatible with the version that the work was made with.
+
+    c) Accompany the work with a written offer, valid for at
+    least three years, to give the same user the materials
+    specified in Subsection 6a, above, for a charge no more
+    than the cost of performing this distribution.
+
+    d) If distribution of the work is made by offering access to copy
+    from a designated place, offer equivalent access to copy the above
+    specified materials from the same place.
+
+    e) Verify that the user has already received a copy of these
+    materials or that you have already sent this user a copy.
+
+  For an executable, the required form of the "work that uses the
+Library" must include any data and utility programs needed for
+reproducing the executable from it.  However, as a special exception,
+the materials to be distributed need not include anything that is
+normally distributed (in either source or binary form) with the major
+components (compiler, kernel, and so on) of the operating system on
+which the executable runs, unless that component itself accompanies
+the executable.
+
+  It may happen that this requirement contradicts the license
+restrictions of other proprietary libraries that do not normally
+accompany the operating system.  Such a contradiction means you cannot
+use both them and the Library together in an executable that you
+distribute.
+
+  7. You may place library facilities that are a work based on the
+Library side-by-side in a single library together with other library
+facilities not covered by this License, and distribute such a combined
+library, provided that the separate distribution of the work based on
+the Library and of the other library facilities is otherwise
+permitted, and provided that you do these two things:
+
+    a) Accompany the combined library with a copy of the same work
+    based on the Library, uncombined with any other library
+    facilities.  This must be distributed under the terms of the
+    Sections above.
+
+    b) Give prominent notice with the combined library of the fact
+    that part of it is a work based on the Library, and explaining
+    where to find the accompanying uncombined form of the same work.
+
+  8. You may not copy, modify, sublicense, link with, or distribute
+the Library except as expressly provided under this License.  Any
+attempt otherwise to copy, modify, sublicense, link with, or
+distribute the Library is void, and will automatically terminate your
+rights under this License.  However, parties who have received copies,
+or rights, from you under this License will not have their licenses
+terminated so long as such parties remain in full compliance.
+
+  9. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Library or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Library (or any work based on the
+Library), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Library or works based on it.
+
+  10. Each time you redistribute the Library (or any work based on the
+Library), the recipient automatically receives a license from the
+original licensor to copy, distribute, link with or modify the Library
+subject to these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties with
+this License.
+
+  11. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Library at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Library by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Library.
+
+If any portion of this section is held invalid or unenforceable under any
+particular circumstance, the balance of the section is intended to apply,
+and the section as a whole is intended to apply in other circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  12. If the distribution and/or use of the Library is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Library under this License may add
+an explicit geographical distribution limitation excluding those countries,
+so that distribution is permitted only in or among countries not thus
+excluded.  In such case, this License incorporates the limitation as if
+written in the body of this License.
+
+  13. The Free Software Foundation may publish revised and/or new
+versions of the Lesser General Public License from time to time.
+Such new versions will be similar in spirit to the present version,
+but may differ in detail to address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Library
+specifies a version number of this License which applies to it and
+"any later version", you have the option of following the terms and
+conditions either of that version or of any later version published by
+the Free Software Foundation.  If the Library does not specify a
+license version number, you may choose any version ever published by
+the Free Software Foundation.
+
+  14. If you wish to incorporate parts of the Library into other free
+programs whose distribution conditions are incompatible with these,
+write to the author to ask for permission.  For software which is
+copyrighted by the Free Software Foundation, write to the Free
+Software Foundation; we sometimes make exceptions for this.  Our
+decision will be guided by the two goals of preserving the free status
+of all derivatives of our free software and of promoting the sharing
+and reuse of software generally.
+
+			    NO WARRANTY
+
+  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
+WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
+EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
+OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
+KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
+LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
+THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
+WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
+AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
+FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
+CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
+LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
+RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
+FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
+SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
+DAMAGES.
+
+		     END OF TERMS AND CONDITIONS
+
+           How to Apply These Terms to Your New Libraries
+
+  If you develop a new library, and you want it to be of the greatest
+possible use to the public, we recommend making it free software that
+everyone can redistribute and change.  You can do so by permitting
+redistribution under these terms (or, alternatively, under the terms of the
+ordinary General Public License).
+
+  To apply these terms, attach the following notices to the library.  It is
+safest to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least the
+"copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the library's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Lesser General Public
+    License as published by the Free Software Foundation; either
+    version 2.1 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Lesser General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public
+    License along with this library; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+
+Also add information on how to contact you by electronic and paper mail.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the library, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the
+  library `Frob' (a library for tweaking knobs) written by James Random Hacker.
+
+  <signature of Ty Coon>, 1 April 1990
+  Ty Coon, President of Vice
+
+That's all there is to it!
+
+
diff -Naur lib/ajax/README.txt lib/ajax/README.txt
--- lib/ajax/README.txt	1969-12-31 21:00:00.000000000 -0300
+++ lib/ajax/README.txt	2006-05-29 18:47:50.000000000 -0300
@@ -0,0 +1,104 @@
+====================================================================
+ xajax PHP Class Library
+ The easiest way to develop asynchronous Ajax applications with PHP
+
+ Version 0.2.1 (stable release)
+ README Text File
+
+ ------------------------------------------------------
+ | Release Notes:                                     |
+ | http://wiki.xajaxproject.org/0.2.1_Release_Notes   |
+ |                                                    |
+ | Lead Developers:                                   |
+ | Jared White (jared@intuitivefuture.com)            |
+ | J. Max Wilson (jmaxwilson@users.sourceforge.net)   |
+ | Eion Robb (eion@bigfoot.com)                       |
+ ------------------------------------------------------
+====================================================================
+
+ :: To find out what's changed since the 0.2 release of xajax, ::
+ :: view the Release Notes in the link above.                  ::
+
+1. Introduction
+
+xajax is a PHP library that you can include in your PHP scripts
+to provide an easy way for Web pages to call PHP functions or
+object methods using Ajax (Asynchronous Javascript And XML). Simply
+register one or more functions/methods with the xajax object that
+return a proper XML response using the supplied response class, add
+a statement in your HTML header to print the Javascript include,
+and run a request processor prior to outputting any HTML. Then add
+some simple Javascript function calls to your HTML, and xajax takes
+care of the rest!
+
+xajax includes a Javascript object to facilitate the communication
+between the browser and the server, and it can also be used as a
+Javascript library directly to simplify certain DOM and event
+manipulations. However, you can definitely choose to use a
+dedicated Javascript "engine" of your liking and integrate it with
+xajax's client/server communication features in a number of ways.
+More tightly-coupled integration will be forthcoming in a future
+version of xajax.
+
+2. For More Information
+
+The official xajax Web site is located at:
+http://www.xajaxproject.org
+
+Visit the xajax Forums at:
+http://community.xajaxproject.org
+to keep track of the latest news and participate in the community
+discussion.
+
+There is also a wiki with documentation, tips & tricks, and other
+information located at:
+http://wiki.xajaxproject.org
+
+3. Installation
+
+To run xajax, you need:
+* Apache Web Server or IIS for Windows XP/2003 Server
+   (other servers may or may not work and are not supported at this
+   time)
+* PHP 4.3.x or PHP 5.x
+* Minimum supported browsers: Internet Explorer 5.5, Firefox 1.0 (or
+   equivalent Gecko-based browser), Safari 1.3, Opera 8.5 (older
+   versions only work with GET requests)
+
+To install xajax:
+Unpack the contents of this archive and copy them to your main Web
+site folder. Or if you wish, you can put all of the files in a
+dedicated "xajax" folder on your Web server (make sure that you
+know what that URL is relative your site pages so you can provide
+xajax with the correct installed folder URL). Note that the
+"thewall" folder in the "examples" folder needs to be writable by
+the Web server for that example to function.
+
+Within the main xajax folder there are two folders: "examples"
+and "tests". You should be able to view these PHP pages from your
+Web browser and see xajax working in action. If you can view the
+pages but the AJAX calls are not working, there may be something
+wrong with your server setup or perhaps your browser is not
+supported or configured correctly. If worst comes to worst, post
+a message in our forums and someone may be able to help you.
+
+4. Documentation
+
+Detailed documentation for the xajax PHP classes is available on
+our wiki (URL listed above in section 2), and more is on the way
+(particularly in regards to the Javascript component of xajax).
+Another good way of learning xajax is to look at the code for the
+examples and tests. If you need any help, pop in the forums and
+ask for assistance (and the more specific your questions are,
+the better the answers will be).
+
+5. Contributing to xajax
+
+xajax is released under the LGPL open source license. If you wish
+to contribute to the project or suggest new features, introduce
+yourself on the forums or you can e-mail the lead developers at
+the addresses listed at the top of this README.
+
+6. Good luck and enjoy!
+
+====================================================================
diff -Naur lib/ajax/ajaxlib.php lib/ajax/ajaxlib.php
--- lib/ajax/ajaxlib.php	1969-12-31 21:00:00.000000000 -0300
+++ lib/ajax/ajaxlib.php	2006-05-29 18:49:49.000000000 -0300
@@ -0,0 +1,119 @@
+<?php
+// CVS: $Id$
+//this script may only be included - so its better to die if called directly.
+if (strpos($_SERVER["SCRIPT_NAME"],basename(__FILE__)) !== false) {
+  header("location: index.php");
+  exit;
+}
+
+global $feature_ajax;
+if ($feature_ajax == 'y') {
+    require_once("lib/ajax/xajax.inc.php");
+
+    class TikiAjax extends xajax {
+	
+	/**
+	 * Array of templates that are allowed to be served
+	 *
+	 * @access private
+	 * @var    array $aTemplates
+	 */
+	var $aTemplates;
+	
+	
+	/**
+	 * PHP4 constructor.
+	 *
+	 * @access   public
+	 * @return   void
+	 */
+	function TikiAjax() {
+	    TikiAjax::__construct();
+	}
+	
+	/**
+	 * PHP 5 constructor.
+	 *
+	 * @access   public
+	 * @return   void
+	 */
+	function __construct() {
+	    xajax::xajax();
+	    
+	    $this->aTemplates = array();
+
+	    $this->waitCursorOn();
+	}
+	
+	/**
+	 * Tells ajax engine that a given template can be retrieved with
+	 * this page
+	 *
+	 * @access  public
+	 * @param   string $name
+	 * @return  void
+	 */
+	function registerTemplate($template) {
+	    $this->aTemplates[$template] = 1;
+	}
+
+	/**
+	 * Checks if a given template is registered
+	 *
+	 * @access  public
+	 * @param   string $template
+	 * @return  boolean
+	 */
+	function templateIsRegistered($template) {
+	    return array_key_exists($template, $this->aTemplates);
+	}
+
+	/**
+	 * Assigns xajax javascript to smarty just before processing requests.
+	 * this way developer can register functions in php code and don't have
+         * to manually assign xajax_js.
+	 *
+	 * @access  public
+	 * @return  void
+	 */
+	function processRequests() {
+	    global $smarty;
+	    if (isset($smarty)) {
+		$smarty->assign("xajax_js",$this->getJavascript('','lib/ajax/xajax_js/xajax.js'));
+	    }
+
+	    xajax::processRequests();
+	}
+
+    }
+} else {
+    // dumb TikiAjax class
+    class TikiAjax {
+	function TikiAjax() {}
+	function __construct() {}
+	function registerFunction() {}
+	function registerTemplate() {}
+	function templateIsRegistered() { return false; }
+	function processRequests() {}
+	function getJavascript() { return ''; }
+    }
+}
+
+global $ajaxlib;
+$ajaxlib = new TikiAjax();
+$ajaxlib->registerFunction("loadComponent");
+
+function loadComponent($template, $htmlElementId) {
+    global $smarty, $ajaxlib;
+    $objResponse = new xajaxResponse();
+    
+    if ($ajaxlib->templateIsRegistered($template)) {
+	$content = $smarty->fetch($template);
+	$objResponse->addAssign($htmlElementId, "innerHTML", $content);
+    } else {
+	$objResponse->addAlert(sprintf(tra("Template %s not registered"),$template));
+    }
+    return $objResponse;
+}
+
+?>
diff -Naur lib/ajax/tiki-ajax.js lib/ajax/tiki-ajax.js
--- lib/ajax/tiki-ajax.js	1969-12-31 21:00:00.000000000 -0300
+++ lib/ajax/tiki-ajax.js	2006-05-29 18:47:50.000000000 -0300
@@ -0,0 +1,15 @@
+function loadComponent(url, template, htmlelement) {
+    xajaxRequestUri = url;
+    xajax_loadComponent(template, htmlelement);      
+}
+
+xajax.loadingFunction = function() {
+    show('ajaxLoading');
+};
+
+xajax.doneLoadingFunction = function() {
+    hide('ajaxLoading');
+};
+
+
+
diff -Naur lib/ajax/xajax.inc.php lib/ajax/xajax.inc.php
--- lib/ajax/xajax.inc.php	1969-12-31 21:00:00.000000000 -0300
+++ lib/ajax/xajax.inc.php	2006-05-29 18:47:50.000000000 -0300
@@ -0,0 +1,942 @@
+<?php
+///////////////////////////////////////////////////////////////////////////////
+// xajax.inc.php :: Main xajax class and setup file
+//
+// xajax version 0.2.2
+// copyright (c) 2005 by Jared White & J. Max Wilson
+// http://xajax.sourceforge.net
+//
+// xajax is an open source PHP class library for easily creating powerful
+// PHP-driven, web-based AJAX Applications. Using xajax, you can asynchronously
+// call PHP functions and update the content of your your webpage without
+// reloading the page.
+//
+// xajax is released under the terms of the LGPL license
+// http://www.gnu.org/copyleft/lesser.html#SEC3
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+// 
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+///////////////////////////////////////////////////////////////////////////////
+
+// Define XAJAX_DEFAULT_CHAR_ENCODING that is used by both
+// the xajax and xajaxResponse classes
+if (!defined ('XAJAX_DEFAULT_CHAR_ENCODING'))
+{
+	define ('XAJAX_DEFAULT_CHAR_ENCODING', 'utf-8' );
+}
+
+require_once("xajaxResponse.inc.php");
+
+// Communication Method Defines
+if (!defined ('XAJAX_GET'))
+{
+	define ('XAJAX_GET', 0);
+}
+if (!defined ('XAJAX_POST'))
+{
+	define ('XAJAX_POST', 1);
+}
+
+// the xajax class generates the xajax javascript for your page including the 
+// javascript wrappers for the PHP functions that you want to call from your page.
+// It also handles processing and executing the command messages in the xml responses
+// sent back to your page from your PHP functions.
+class xajax
+{
+	var $aFunctions;				// Array of PHP functions that will be callable through javascript wrappers
+	var $aObjects;				// Array of object callbacks that will allow Javascript to call PHP methods (key=function name)
+	var $aFunctionRequestTypes;	// Array of RequestTypes to be used with each function (key=function name)
+	var $aFunctionIncludeFiles;	// Array of Include Files for any external functions (key=function name)
+	var $sCatchAllFunction;		// Name of the PHP function to call if no callable function was found
+	var $sPreFunction;			// Name of the PHP function to call before any other function
+	var $sRequestURI;			// The URI for making requests to the xajax object
+	var $sWrapperPrefix;			// The prefix to prepend to the javascript wraper function name
+	var $bDebug;					// Show debug messages (true/false)
+	var $bStatusMessages;			// Show debug messages (true/false)
+	var $bExitAllowed;			// Allow xajax to exit after processing a request (true/false)
+	var $bWaitCursor;			// Use wait cursor in browser (true/false)
+	var $bErrorHandler;			// Use an special xajax error handler so the errors are sent to the browser properly
+	var $sLogFile;				// Specify if xajax should log errors (and more information in a future release)
+	var $bCleanBuffer;			// Clean all output buffers before outputting response (true/false)
+	var $sEncoding;				// String containing the character encoding used.
+	var $bDecodeUTF8Input;		// Decode input request args from UTF-8 (true/false)
+	var $bOutputEntities;			// Convert special characters to HTML entities (true/false)
+	var $aObjArray;				// Array for parsing complex objects
+	var $iPos;					// Position in $aObjArray
+	
+	// Contructor
+	// $sRequestURI - defaults to the current page
+	// $sWrapperPrefix - defaults to "xajax_";
+	// $sEncoding - defaults to XAJAX_DEFAULT_CHAR_ENCODING defined above
+	// $bDebug Mode - defaults to false
+	// usage: $xajax = new xajax();
+	function xajax($sRequestURI="",$sWrapperPrefix="xajax_",$sEncoding=XAJAX_DEFAULT_CHAR_ENCODING,$bDebug=false)
+	{
+		$this->aFunctions = array();
+		$this->aObjects = array();
+		$this->aFunctionIncludeFiles = array();
+		$this->sRequestURI = $sRequestURI;
+		if ($this->sRequestURI == "")
+			$this->sRequestURI = $this->_detectURI();
+		$this->sWrapperPrefix = $sWrapperPrefix;
+		$this->bDebug = $bDebug;
+		$this->bStatusMessages = false;
+		$this->bWaitCursor = true;
+		$this->bExitAllowed = true;
+		$this->bErrorHandler = false;
+		$this->sLogFile = "";
+		$this->bCleanBuffer = false;
+		$this->setCharEncoding($sEncoding);
+		$this->bDecodeUTF8Input = false;
+		$this->bOutputEntities = false;
+	}
+		
+	// setRequestURI() sets the URI to which requests will be made
+	// usage: $xajax->setRequestURI("http://xajax.sourceforge.net");
+	function setRequestURI($sRequestURI)
+	{
+		$this->sRequestURI = $sRequestURI;
+	}
+
+	// setWrapperPrefix() sets the prefix that will be appended to the Javascript
+	// wrapper functions (default is "xajax_").
+	function setWrapperPrefix($sPrefix)
+	{
+		$this->sWrapperPrefix = $sPrefix;
+	}
+	
+	// debugOn() enables debug messages for xajax
+	function debugOn()
+	{
+		$this->bDebug = true;
+	}
+	
+	// debugOff() disables debug messages for xajax (default behavior)
+	function debugOff()
+	{
+		$this->bDebug = false;
+	}
+		
+	// statusMessagesOn() enables messages in the statusbar for xajax
+	function statusMessagesOn()
+	{
+		$this->bStatusMessages = true;
+	}
+	
+	// statusMessagesOff() disables messages in the statusbar for xajax (default behavior)
+	function statusMessagesOff()
+	{
+		$this->bStatusMessages = false;
+	}
+	
+	// waitCursor() enables the wait cursor to be displayed in the browser (default behavior)
+	function waitCursorOn()
+	{
+		$this->bWaitCursor = true;
+	}
+	
+	// waitCursorOff() disables the wait cursor to be displayed in the browser
+	function waitCursorOff()
+	{
+		$this->bWaitCursor = false;
+	}	
+	
+	// exitAllowedOn() enables xajax to exit immediately after processing a request
+	// and sending the response back to the browser (default behavior)
+	function exitAllowedOn()
+	{
+		$this->bExitAllowed = true;
+	}
+	
+	// exitAllowedOff() disables xajax's default behavior of exiting immediately
+	// after processing a request and sending the response back to the browser
+	function exitAllowedOff()
+	{
+		$this->bExitAllowed = false;
+	}
+	
+	// errorHandlerOn() turns on xajax's error handling system so that PHP errors
+	// that occur during a request are trapped and pushed to the browser in the
+	// form of a Javascript alert
+	function errorHandlerOn()
+	{
+		$this->bErrorHandler = true;
+	}
+	// errorHandlerOff() turns off xajax's error handling system (default behavior)
+	function errorHandlerOff()
+	{
+		$this->bErrorHandler = false;
+	}
+	
+	// setLogFile() specifies a log file that will be written to by xajax during
+	// a request (used only by the error handling system at present). If you don't
+	// invoke this method, or you pass in "", then no log file will be written to.
+	// usage: $xajax->setLogFile("/xajax_logs/errors.log");
+	function setLogFile($sFilename)
+	{
+		$this->sLogFile = $sFilename;
+	}
+
+	// cleanBufferOn() causes xajax to clean out all output buffers before outputting
+	// a response (default behavior)
+	function cleanBufferOn()
+	{
+		$this->bCleanBuffer = true;
+	}
+	// cleanBufferOff() turns off xajax's output buffer cleaning
+	function cleanBufferOff()
+	{
+		$this->bCleanBuffer = false;
+	}
+	
+	// setCharEncoding() sets the character encoding to be used by xajax
+	// usage: $xajax->setCharEncoding("utf-8");
+	// *Note: to change the default character encoding for all xajax responses, set 
+	// the XAJAX_DEFAULT_CHAR_ENCODING constant near the beginning of the xajax.inc.php file
+	function setCharEncoding($sEncoding)
+	{
+		$this->sEncoding = $sEncoding;
+	}
+
+	// decodeUTF8InputOn() causes xajax to decode the input request args from UTF-8 to the
+	// current encoding.
+	function decodeUTF8InputOn()
+	{
+		$this->bDecodeUTF8Input = true;
+	}
+	// decodeUTF8InputOff() turns off decoding the input request args from UTF-8.
+	// (default behavior)
+	function decodeUTF8InputOff()
+	{
+		$this->bDecodeUTF8Input = false;
+	}
+	
+	// outputEntitiesOn() tells the response object to convert special characters to
+	// HTML entities automatically (only works if the mb_string extension is available).
+	function outputEntitiesOn()
+	{
+		$this->bOutputEntities = true;
+	}
+	
+	// outputEntitiesOff() tells the response object to output special characters
+	// intact. (default behavior)
+	function outputEntitiesOff()
+	{
+		$this->bOutputEntities = false;
+	}
+				
+	// registerFunction() registers a PHP function or method to be callable through
+	// xajax in your Javascript. If you want to register a function, pass in the name
+	// of that function. If you want to register a static class method, pass in an array
+	// like so:
+	// array("myFunctionName", "myClass", "myMethod")
+	// For an object instance method, use an object variable for the second array element
+	// (and in PHP 4 make sure you put an & before the variable to pass the object by
+	// reference). Note: the function name is what you call via Javascript, so it can be
+	// anything as long as it doesn't conflict with any other registered function name.
+	// 
+	// $mFunction is a string containing the function name or an object callback array
+	// $sRequestType is the RequestType (XAJAX_GET/XAJAX_POST) that should be used 
+	//		for this function.  Defaults to XAJAX_POST.
+	// usage: $xajax->registerFunction("myFunction");
+	//    or: $xajax->registerFunction(array("myFunctionName", &$myObject, "myMethod"));
+	function registerFunction($mFunction,$sRequestType=XAJAX_POST)
+	{
+		if (is_array($mFunction)) {
+			$this->aFunctions[$mFunction[0]] = 1;
+			$this->aFunctionRequestTypes[$mFunction[0]] = $sRequestType;
+			$this->aObjects[$mFunction[0]] = array_slice($mFunction, 1);
+		}	
+		else {
+			$this->aFunctions[$mFunction] = 1;
+			$this->aFunctionRequestTypes[$mFunction] = $sRequestType;
+		}
+	}
+	
+	// registerExternalFunction() registers a PHP function to be callable through xajax
+	// which is located in some other file.  If the function is requested the external
+	// file will be included to define the function before the function is called
+	// $mFunction is a string containing the function name or an object callback array
+	//   see registerFunction() for more info on object callback arrays
+	// $sIncludeFile is a string containing the path and filename of the include file
+	// $sRequestType is the RequestType (XAJAX_GET/XAJAX_POST) that should be used 
+	//		for this function.  Defaults to XAJAX_POST.
+	// usage: $xajax->registerExternalFunction("myFunction","myFunction.inc.php",XAJAX_POST);
+	function registerExternalFunction($mFunction,$sIncludeFile,$sRequestType=XAJAX_POST)
+	{
+		$this->registerFunction($mFunction, $sRequestType);
+		
+		if (is_array($mFunction)) {
+			$this->aFunctionIncludeFiles[$mFunction[0]] = $sIncludeFile;
+		}
+		else {
+			$this->aFunctionIncludeFiles[$mFunction] = $sIncludeFile;
+		}
+	}
+	
+	// registerCatchAllFunction() registers a PHP function to be called when xajax cannot
+	// find the function being called via Javascript. Because this is technically
+	// impossible when using "wrapped" functions, the catch-all feature is only useful
+	// when you're directly using the xajax.call() Javascript method. Use the catch-all
+	// feature when you want more dynamic ability to intercept unknown calls and handle
+	// them in a custom way.
+	// $mFunction is a string containing the function name or an object callback array
+	//   see registerFunction() for more info on object callback arrays
+	// usage: $xajax->registerCatchAllFunction("myCatchAllFunction");
+	function registerCatchAllFunction($mFunction)
+	{
+		if (is_array($mFunction)) {
+			$this->sCatchAllFunction = $mFunction[0];
+			$this->aObjects[$mFunction[0]] = array_slice($mFunction, 1);
+		}
+		else {
+			$this->sCatchAllFunction = $mFunction;
+		}
+	}
+	
+	// registerPreFunction() registers a PHP function to be called before xajax calls
+	// the requested function. xajax will automatically add the request function's response
+	// to the pre-function's response to create a single response. Another feature is
+	// the ability to return not just a response, but an array with the first element
+	// being false (a boolean) and the second being the response. In this case, the
+	// pre-function's response will be returned to the browser without xajax calling
+	// the requested function.
+	// $mFunction is a string containing the function name or an object callback array
+	//   see registerFunction() for more info on object callback arrays
+	// usage $xajax->registerPreFunction("myPreFunction");
+	function registerPreFunction($mFunction)
+	{
+		if (is_array($mFunction)) {
+			$this->sPreFunction = $mFunction[0];
+			$this->aObjects[$mFunction[0]] = array_slice($mFunction, 1);
+		}
+		else {
+			$this->sPreFunction = $mFunction;
+		}
+	}
+	
+	// returns true if xajax can process the request, false if otherwise
+	// you can use this to determine if xajax needs to process the request or not
+	function canProcessRequests()
+	{
+		if ($this->getRequestMode() != -1) return true;
+		return false;
+	}
+	
+	// returns the current request mode, or -1 if there is none
+	function getRequestMode()
+	{
+		if (!empty($_GET["xajax"]))
+			return XAJAX_GET;
+		
+		if (!empty($_POST["xajax"]))
+			return XAJAX_POST;
+			
+		return -1;
+	}
+	
+	// processRequests() is the main communications engine of xajax
+	// The engine handles all incoming xajax requests, calls the apporiate PHP functions
+	// and passes the xml responses back to the javascript response handler
+	// if your RequestURI is the same as your web page then this function should
+	// be called before any headers or html has been sent.
+	// usage: $xajax->processRequests()
+	function processRequests()
+	{	
+		
+		$requestMode = -1;
+		$sFunctionName = "";
+		$bFoundFunction = true;
+		$bFunctionIsCatchAll = false;
+		$sFunctionNameForSpecial = "";
+		$aArgs = array();
+		$sPreResponse = "";
+		$bEndRequest = false;
+		$sResponse = "";
+		
+		$requestMode = $this->getRequestMode();
+		if ($requestMode == -1) return;
+	
+		if ($requestMode == XAJAX_POST)
+		{
+			$sFunctionName = $_POST["xajax"];
+			
+			if (!empty($_POST["xajaxargs"])) 
+				$aArgs = $_POST["xajaxargs"];
+		}
+		else
+		{	
+			header ("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
+			header ("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
+			header ("Cache-Control: no-cache, must-revalidate");
+			header ("Pragma: no-cache");
+			
+			$sFunctionName = $_GET["xajax"];
+			
+			if (!empty($_GET["xajaxargs"])) 
+				$aArgs = $_GET["xajaxargs"];
+		}
+		
+		// Use xajax error handler if necessary
+		if ($this->bErrorHandler) {
+			$GLOBALS['xajaxErrorHandlerText'] = "";
+			set_error_handler("xajaxErrorHandler");
+		}
+		
+		if ($this->sPreFunction) {
+			if (!$this->_isFunctionCallable($this->sPreFunction)) {
+				$bFoundFunction = false;
+				$objResponse = new xajaxResponse();
+				$objResponse->addAlert("Unknown Pre-Function ". $this->sPreFunction);
+				$sResponse = $objResponse->getXML();
+			}
+		}
+		//include any external dependencies associated with this function name
+		if (array_key_exists($sFunctionName,$this->aFunctionIncludeFiles))
+		{
+			ob_start();
+			include_once($this->aFunctionIncludeFiles[$sFunctionName]);
+			ob_end_clean();
+		}
+		
+		if ($bFoundFunction) {
+			$sFunctionNameForSpecial = $sFunctionName;
+			if (!array_key_exists($sFunctionName, $this->aFunctions))
+			{
+				if ($this->sCatchAllFunction) {
+					$sFunctionName = $this->sCatchAllFunction;
+					$bFunctionIsCatchAll = true;
+				}
+				else {
+					$bFoundFunction = false;
+					$objResponse = new xajaxResponse();
+					$objResponse->addAlert("Unknown Function $sFunctionName.");
+					$sResponse = $objResponse->getXML();
+				}
+			}
+			else if ($this->aFunctionRequestTypes[$sFunctionName] != $requestMode)
+			{
+				$bFoundFunction = false;
+				$objResponse = new xajaxResponse();
+				$objResponse->addAlert("Incorrect Request Type.");
+				$sResponse = $objResponse->getXML();
+			}
+		}
+		
+		if ($bFoundFunction)
+		{
+			for ($i = 0; $i < sizeof($aArgs); $i++)
+			{
+				// If magic quotes is on, then we need to strip the slashes from the args
+				if (get_magic_quotes_gpc() == 1 && is_string($aArgs[$i])) {
+				
+					$aArgs[$i] = stripslashes($aArgs[$i]);
+				}
+				if (stristr($aArgs[$i],"<xjxobj>") != false)
+				{
+					$aArgs[$i] = $this->_xmlToArray("xjxobj",$aArgs[$i]);	
+				}
+				else if (stristr($aArgs[$i],"<xjxquery>") != false)
+				{
+					$aArgs[$i] = $this->_xmlToArray("xjxquery",$aArgs[$i]);	
+				}
+			}
+
+			if ($this->sPreFunction) {
+				$mPreResponse = $this->_callFunction($this->sPreFunction, array($sFunctionNameForSpecial, $aArgs));
+				if (is_array($mPreResponse) && $mPreResponse[0] === false) {
+					$bEndRequest = true;
+					$sPreResponse = $mPreResponse[1];
+				}
+				else {
+					$sPreResponse = $mPreResponse;
+				}
+				if (is_a($sPreResponse, "xajaxResponse")) {
+					$sPreResponse = $sPreResponse->getXML();
+				}
+				if ($bEndRequest) $sResponse = $sPreResponse;
+			}
+			
+			if (!$bEndRequest) {
+				if (!$this->_isFunctionCallable($sFunctionName)) {
+					$objResponse = new xajaxResponse();
+					$objResponse->addAlert("The Registered Function $sFunctionName Could Not Be Found.");
+					$sResponse = $objResponse->getXML();
+				}
+				else {
+					if ($bFunctionIsCatchAll) {
+						$aArgs = array($sFunctionNameForSpecial, $aArgs);
+					}
+					$sResponse = $this->_callFunction($sFunctionName, $aArgs);
+				}
+				if (is_a($sResponse, "xajaxResponse")) {
+					$sResponse = $sResponse->getXML();
+				}
+				if (!is_string($sResponse) || strpos($sResponse, "<xjx>") === FALSE) {
+					$objResponse = new xajaxResponse();
+					$objResponse->addAlert("No XML Response Was Returned By Function $sFunctionName.");
+					$sResponse = $objResponse->getXML();
+				}
+				else if ($sPreResponse != "") {
+					$sNewResponse = new xajaxResponse($this->sEncoding, $this->bOutputEntities);
+					$sNewResponse->loadXML($sPreResponse);
+					$sNewResponse->loadXML($sResponse);
+					$sResponse = $sNewResponse->getXML();
+				}
+			}
+		}
+		
+		$sContentHeader = "Content-type: text/xml;";
+		if ($this->sEncoding && strlen(trim($this->sEncoding)) > 0)
+			$sContentHeader .= " charset=".$this->sEncoding;
+		header($sContentHeader);
+		if ($this->bErrorHandler && !empty( $GLOBALS['xajaxErrorHandlerText'] )) {
+			$sErrorResponse = new xajaxResponse();
+			$sErrorResponse->addAlert("** PHP Error Messages: **" . $GLOBALS['xajaxErrorHandlerText']);
+			if ($this->sLogFile) {
+				$fH = @fopen($this->sLogFile, "a");
+				if (!$fH) {
+					$sErrorResponse->addAlert("** Logging Error **\n\nxajax was unable to write to the error log file:\n" . $this->sLogFile);
+				}
+				else {
+					fwrite($fH, "** xajax Error Log - " . strftime("%b %e %Y %I:%M:%S %p") . " **" . $GLOBALS['xajaxErrorHandlerText'] . "\n\n\n");
+					fclose($fH);
+				}
+			}
+
+			$sErrorResponse->loadXML($sResponse);
+			$sResponse = $sErrorResponse->getXML();
+			
+		}
+		if ($this->bCleanBuffer) while (@ob_end_clean());
+		print $sResponse;
+		if ($this->bErrorHandler) restore_error_handler();
+		
+		if ($this->bExitAllowed)
+			exit();
+	}
+			
+	// printJavascript() prints the xajax javascript code into your page by printing
+	// the output of the getJavascript() method. It should only be called between the
+	// <head> </head> tags in your HTML page. Remember, if you only want to obtain the
+	// result of this function, use getJavascript() instead.
+	// $sJsURI is the relative address of the folder where xajax has been installed.
+	//   For instance, if your PHP file is "http://www.myserver.com/myfolder/mypage.php"
+	//   and xajax was installed in "http://www.myserver.com/anotherfolder", then
+	//   $sJsURI should be set to "../anotherfolder". Defaults to assuming xajax is in
+	//   the same folder as your PHP file.
+	// $sJsFile is the relative folder/file pair of the xajax Javascript engine located
+	// within the xajax installation folder. Defaults to xajax_js/xajax.js.
+	// usage:
+	//	<head>
+	//		...
+	//		< ?php $xajax->printJavascript(); ? >
+	function printJavascript($sJsURI="", $sJsFile=NULL)
+	{
+		print $this->getJavascript($sJsURI, $sJsFile);
+	}
+	
+	// getJavascript() returns the xajax javascript code that should be added to
+	// your HTML page between the <head> </head> tags. See printJavascript()
+	// for information about the function arguments.
+	// usage:
+	//  < ?php $xajaxJSHead = $xajax->getJavascript(); ? >
+	//	<head>
+	//		...
+	//		< ?php echo $xajaxJSHead; ? >
+	function getJavascript($sJsURI="", $sJsFile=NULL)
+	{	
+		$html = $this->getJavascriptConfig();
+		$html .= $this->getJavascriptInclude($sJsURI, $sJsFile);
+		
+		return $html;
+	}
+	
+	// getJavascriptConfig() returns a string containing inline Javascript that sets
+	// up the xajax runtime
+	function getJavascriptConfig()
+	{
+		$html  = "\t<script type=\"text/javascript\">\n";
+		$html .= "var xajaxRequestUri=\"".$this->sRequestURI."\";\n";
+		$html .= "var xajaxDebug=".($this->bDebug?"true":"false").";\n";
+		$html .= "var xajaxStatusMessages=".($this->bStatusMessages?"true":"false").";\n";
+		$html .= "var xajaxWaitCursor=".($this->bWaitCursor?"true":"false").";\n";
+		$html .= "var xajaxDefinedGet=".XAJAX_GET.";\n";
+		$html .= "var xajaxDefinedPost=".XAJAX_POST.";\n";
+		$html .= "var xajaxLoaded=false;\n";
+
+		foreach($this->aFunctions as $sFunction => $bExists) {
+			$html .= $this->_wrap($sFunction,$this->aFunctionRequestTypes[$sFunction]);
+		}
+
+		$html .= "\t</script>\n";
+		return $html;		
+	}
+	
+	// getJavascriptInclude() returns a string containing a Javascript include of the
+	// xajax.js file along with a check to see if the file loaded after six seconds
+	function getJavascriptInclude($sJsURI="", $sJsFile=NULL)
+	{
+		if ($sJsFile == NULL) $sJsFile = "xajax_js/xajax.js";
+			
+		if ($sJsURI != "" && substr($sJsURI, -1) != "/") $sJsURI .= "/";
+		
+		$html = "\t<script type=\"text/javascript\" src=\"" . $sJsURI . $sJsFile . "\"></script>\n";	
+		$html .= "\t<script type=\"text/javascript\">\n";
+		$html .= "window.setTimeout(function () { if (!xajaxLoaded) { alert('Error: the xajax Javascript file could not be included. Perhaps the URL is incorrect?\\nURL: {$sJsURI}{$sJsFile}'); } }, 6000);\n";
+		$html .= "\t</script>\n";
+		return $html;
+	}
+
+	// autoCompressJavascript() can be used to create a new xajax.js file out of the
+	// xajax_uncompressed.js file (which will only happen if xajax.js doesn't already
+	// exist on the filesystem).
+	// $sJsFullFilename is an optional argument containing the full server file path
+	//  of xajax.js.
+	function autoCompressJavascript($sJsFullFilename=NULL)
+	{	
+		$sJsFile = "xajax_js/xajax.js";
+		
+		if ($sJsFullFilename) {
+			$realJsFile = $sJsFullFilename;
+		}
+		else {
+			$realPath = realpath(dirname(__FILE__));
+			$realJsFile = $realPath . "/". $sJsFile;
+		}
+
+		// Create a compressed file if necessary
+		if (!file_exists($realJsFile)) {
+			$srcFile = str_replace(".js", "_uncompressed.js", $realJsFile);
+			if (!file_exists($srcFile)) {
+				trigger_error("The xajax uncompressed Javascript file could not be found in the <b>" . dirname($realJsFile) . "</b> folder. Error ", E_USER_ERROR);	
+			}
+			require("xajaxCompress.php");
+			$javaScript = implode('', file($srcFile));
+			$compressedScript = xajaxCompressJavascript($javaScript);
+			$fH = @fopen($realJsFile, "w");
+			if (!$fH) {
+				trigger_error("The xajax compressed javascript file could not be written in the <b>" . dirname($realJsFile) . "</b> folder. Error ", E_USER_ERROR);
+			}
+			else {
+				fwrite($fH, $compressedScript);
+				fclose($fH);
+			}
+		}
+	}
+	// _detectURL() returns the current URL based upon the SERVER vars
+	// used internally
+	function _detectURI() {
+		$aURL = array();
+
+		// Try to get the request URL
+		if (!empty($_SERVER['REQUEST_URI'])) {
+			$aURL = parse_url($_SERVER['REQUEST_URI']);
+		}
+
+		// Fill in the empty values
+		if (empty($aURL['scheme'])) {
+			if (!empty($_SERVER['HTTP_SCHEME'])) {
+				$aURL['scheme'] = $_SERVER['HTTP_SCHEME'];
+			} else {
+				$aURL['scheme'] = (!empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) != 'off') ? 'https' : 'http';
+			}
+		}
+
+		if (empty($aURL['host'])) {
+			if (!empty($_SERVER['HTTP_HOST'])) {
+				if (strpos($_SERVER['HTTP_HOST'], ':') > 0) {
+					list($aURL['host'], $aURL['port']) = explode(':', $_SERVER['HTTP_HOST']);
+				} else {
+					$aURL['host'] = $_SERVER['HTTP_HOST'];
+				}
+			} else if (!empty($_SERVER['SERVER_NAME'])) {
+				$aURL['host'] = $_SERVER['SERVER_NAME'];
+			} else {
+				print "xajax Error: xajax failed to automatically identify your Request URI.";
+				print "Please set the Request URI explicitly when you instantiate the xajax object.";
+				exit();
+			}
+		}
+
+		if (empty($aURL['port']) && !empty($_SERVER['SERVER_PORT'])) {
+			$aURL['port'] = $_SERVER['SERVER_PORT'];
+		}
+
+		if (empty($aURL['path'])) {
+			if (!empty($_SERVER['PATH_INFO'])) {
+				$sPath = parse_url($_SERVER['PATH_INFO']);
+			} else {
+				$sPath = parse_url($_SERVER['PHP_SELF']);
+			}
+			$aURL['path'] = $sPath['path'];
+			unset($sPath);
+		}
+
+		if (!empty($aURL['query'])) {
+			$aURL['query'] = '?'.$aURL['query'];
+		}
+
+		// Build the URL: Start with scheme, user and pass
+		$sURL = $aURL['scheme'].'://';
+		if (!empty($aURL['user'])) {
+			$sURL.= $aURL['user'];
+			if (!empty($aURL['pass'])) {
+				$sURL.= ':'.$aURL['pass'];
+			}
+			$sURL.= '@';
+		}
+
+		// Add the host
+		$sURL.= $aURL['host'];
+
+		// Add the port if needed
+		if (!empty($aURL['port']) && (($aURL['scheme'] == 'http' && $aURL['port'] != 80) || ($aURL['scheme'] == 'https' && $aURL['port'] != 443))) {
+			$sURL.= ':'.$aURL['port'];
+		}
+
+		// Add the path and the query string
+		$sURL.= $aURL['path'].@$aURL['query'];
+
+		// Clean up
+		unset($aURL);
+		return $sURL;
+	}
+	
+	// returns true if the function name is associated with an object callback,
+	// false if not.
+	// user internally
+	function _isObjectCallback($sFunction)
+	{
+		if (array_key_exists($sFunction, $this->aObjects)) return true;
+		return false;
+	}
+	
+	// return true if the function or object callback can be called, false if not
+	// user internally
+	function _isFunctionCallable($sFunction)
+	{
+		if ($this->_isObjectCallback($sFunction)) {
+			if (is_object($this->aObjects[$sFunction][0])) {
+				return method_exists($this->aObjects[$sFunction][0], $this->aObjects[$sFunction][1]);
+			}
+			else {
+				return is_callable($this->aObjects[$sFunction]);
+			}
+		}
+		else {
+			return function_exists($sFunction);
+		}	
+	}
+	
+	// calls the function, class method, or object method with the supplied arguments
+	// user internally
+	function _callFunction($sFunction, $aArgs)
+	{
+		if ($this->_isObjectCallback($sFunction)) {
+			$mReturn = call_user_func_array($this->aObjects[$sFunction], $aArgs);
+		}
+		else {
+			$mReturn = call_user_func_array($sFunction, $aArgs);
+		}
+		return $mReturn;
+	}
+	
+	// generates the javascript wrapper for the specified PHP function
+	// used internally
+	function _wrap($sFunction,$sRequestType=XAJAX_POST)
+	{
+		$js = "function ".$this->sWrapperPrefix."$sFunction(){return xajax.call(\"$sFunction\", arguments, ".$sRequestType.");}\n";		
+		return $js;
+	}
+
+	// _xmlToArray() takes a string containing xajax xjxobj xml or xjxquery xml
+	// and builds an array representation of it to pass as an argument to
+	// the php function being called. Returns an array.
+	// used internally
+	function _xmlToArray($rootTag, $sXml)
+	{
+		$aArray = array();
+		$sXml = str_replace("<$rootTag>","<$rootTag>|~|",$sXml);
+		$sXml = str_replace("</$rootTag>","</$rootTag>|~|",$sXml);
+		$sXml = str_replace("<e>","<e>|~|",$sXml);
+		$sXml = str_replace("</e>","</e>|~|",$sXml);
+		$sXml = str_replace("<k>","<k>|~|",$sXml);
+		$sXml = str_replace("</k>","|~|</k>|~|",$sXml);
+		$sXml = str_replace("<v>","<v>|~|",$sXml);
+		$sXml = str_replace("</v>","|~|</v>|~|",$sXml);
+		$sXml = str_replace("<q>","<q>|~|",$sXml);
+		$sXml = str_replace("</q>","|~|</q>|~|",$sXml);
+		
+		$this->aObjArray = explode("|~|",$sXml);
+		
+		$this->iPos = 0;
+		$aArray = $this->_parseObjXml($rootTag);
+		
+		if ($this->bDecodeUTF8Input) {
+			$sFuncToUse = NULL;
+			if (function_exists('iconv')) {
+				$sFuncToUse = "iconv";
+			}
+			else if (function_exists('mb_convert_encoding')) {
+				$sFuncToUse = "mb_convert_encoding";
+			}
+			else if ($this->sEncoding == "ISO-8859-1") {
+				$sFuncToUse = "utf8_decode";
+			}
+			else {
+				trigger_error("The incoming xajax data could not be converted to UTF-8", E_USER_NOTICE);
+			}
+			if ($sFuncToUse) {
+				foreach ($aArray as $sKey => $sValue) {
+					if (is_string($sValue)) {
+						if ($sFuncToUse == "iconv") {
+							$aArray[$sKey] = iconv("UTF-8", $this->sEncoding, $sValue);
+						}
+						else if ($sFuncToUse == "mb_convert_encoding") {
+							$aArray[$sKey] = mb_convert_encoding($sValue, $this->sEncoding, "UTF-8");
+						}
+						else {
+							$aArray[$sKey] = utf8_decode($sValue);
+						}
+					}
+				}
+			}
+		}
+        
+		return $aArray;
+	}
+	
+	// _parseObjXml() is a recursive function that generates an array from the
+	// contents of $this->aObjArray. Returns an array.
+	// used internally
+	function _parseObjXml($rootTag)
+	{
+		$aArray = array();
+		
+		if ($rootTag == "xjxobj")
+		{
+			while(!stristr($this->aObjArray[$this->iPos],"</xjxobj>"))
+			{
+				$this->iPos++;
+				if(stristr($this->aObjArray[$this->iPos],"<e>"))
+				{
+					$key = "";
+					$value = null;
+						
+					$this->iPos++;
+					while(!stristr($this->aObjArray[$this->iPos],"</e>"))
+					{
+						if(stristr($this->aObjArray[$this->iPos],"<k>"))
+						{
+							$this->iPos++;
+							while(!stristr($this->aObjArray[$this->iPos],"</k>"))
+							{
+								$key .= $this->aObjArray[$this->iPos];
+								$this->iPos++;
+							}
+						}
+						if(stristr($this->aObjArray[$this->iPos],"<v>"))
+						{
+							$this->iPos++;
+							while(!stristr($this->aObjArray[$this->iPos],"</v>"))
+							{
+								if(stristr($this->aObjArray[$this->iPos],"<xjxobj>"))
+								{
+									$value = $this->_parseObjXml("xjxobj");
+									$this->iPos++;
+								}
+								else
+								{
+									$value .= $this->aObjArray[$this->iPos];
+								}
+								$this->iPos++;
+							}
+						}
+						$this->iPos++;
+					}
+					
+					$aArray[$key]=$value;
+				}
+			}
+		}
+		
+		if ($rootTag == "xjxquery")
+		{
+			$sQuery = "";
+			$this->iPos++;
+			while(!stristr($this->aObjArray[$this->iPos],"</xjxquery>"))
+			{
+				if (stristr($this->aObjArray[$this->iPos],"<q>") || stristr($this->aObjArray[$this->iPos],"</q>"))
+				{
+					$this->iPos++;
+					continue;
+				}
+				$sQuery	.= $this->aObjArray[$this->iPos];
+				$this->iPos++;
+			}
+			
+			parse_str($sQuery, $aArray);
+			// If magic quotes is on, then we need to strip the slashes from the
+			// array values because of the parse_str pass which adds slashes
+			if (get_magic_quotes_gpc() == 1) {
+				$newArray = array();
+				foreach ($aArray as $sKey => $sValue) {
+					if (is_string($sValue))
+						$newArray[$sKey] = stripslashes($sValue);
+					else
+						$newArray[$sKey] = $sValue;
+				}
+				$aArray = $newArray;
+			}
+		}
+		
+		return $aArray;
+	}
+		
+}// end class xajax 
+
+// xajaxErrorHandler() is registered with PHP's set_error_handler() function if
+// the xajax error handling system is turned on
+// used by the xajax class
+function xajaxErrorHandler($errno, $errstr, $errfile, $errline)
+{
+	$errorReporting = error_reporting();
+	if (($errno & $errorReporting) == 0) return;
+	
+	if ($errno == E_NOTICE) {
+		$errTypeStr = "NOTICE";
+	}
+	else if ($errno == E_WARNING) {
+		$errTypeStr = "WARNING";
+	}
+	else if ($errno == E_USER_NOTICE) {
+		$errTypeStr = "USER NOTICE";
+	}
+	else if ($errno == E_USER_WARNING) {
+		$errTypeStr = "USER WARNING";
+	}
+	else if ($errno == E_USER_ERROR) {
+		$errTypeStr = "USER FATAL ERROR";
+	}
+	else if ($errno == E_STRICT) {
+		return;
+	}
+	else {
+		$errTypeStr = "UNKNOWN: $errno";
+	}
+	$GLOBALS['xajaxErrorHandlerText'] .= "\n----\n[$errTypeStr] $errstr\nerror in line $errline of file $errfile";
+}
+
+?>
diff -Naur lib/ajax/xajaxCompress.php lib/ajax/xajaxCompress.php
--- lib/ajax/xajaxCompress.php	1969-12-31 21:00:00.000000000 -0300
+++ lib/ajax/xajaxCompress.php	2006-05-29 18:47:50.000000000 -0300
@@ -0,0 +1,144 @@
+<?php
+// xajaxCompressJavascript() compresses the javascript code for more efficient delivery
+// used internally 
+// $sJS is a string containing the javascript code to compress
+function xajaxCompressJavascript($sJS)
+{
+	//remove windows cariage returns
+	$sJS = str_replace("\r","",$sJS);
+	
+	//array to store replaced literal strings
+	$literal_strings = array();
+	
+	//explode the string into lines
+	$lines = explode("\n",$sJS);
+	//loop through all the lines, building a new string at the same time as removing literal strings
+	$clean = "";
+	$inComment = false;
+	$literal = "";
+	$inQuote = false;
+	$escaped = false;
+	$quoteChar = "";
+	
+	for($i=0;$i<count($lines);$i++)
+	{
+		$line = $lines[$i];
+		$inNormalComment = false;
+	
+		//loop through line's characters and take out any literal strings, replace them with ___i___ where i is the index of this string
+		for($j=0;$j<strlen($line);$j++)
+		{
+			$c = substr($line,$j,1);
+			$d = substr($line,$j,2);
+	
+			//look for start of quote
+			if(!$inQuote && !$inComment)
+			{
+				//is this character a quote or a comment
+				if(($c=="\"" || $c=="'") && !$inComment && !$inNormalComment)
+				{
+					$inQuote = true;
+					$inComment = false;
+					$escaped = false;
+					$quoteChar = $c;
+					$literal = $c;
+				}
+				else if($d=="/*" && !$inNormalComment)
+				{
+					$inQuote = false;
+					$inComment = true;
+					$escaped = false;
+					$quoteChar = $d;
+					$literal = $d;	
+					$j++;	
+				}
+				else if($d=="//") //ignore string markers that are found inside comments
+				{
+					$inNormalComment = true;
+					$clean .= $c;
+				}
+				else
+				{
+					$clean .= $c;
+				}
+			}
+			else //allready in a string so find end quote
+			{
+				if($c == $quoteChar && !$escaped && !$inComment)
+				{
+					$inQuote = false;
+					$literal .= $c;
+	
+					//subsitute in a marker for the string
+					$clean .= "___" . count($literal_strings) . "___";
+	
+					//push the string onto our array
+					array_push($literal_strings,$literal);
+	
+				}
+				else if($inComment && $d=="*/")
+				{
+					$inComment = false;
+					$literal .= $d;
+	
+					//subsitute in a marker for the string
+					$clean .= "___" . count($literal_strings) . "___";
+	
+					//push the string onto our array
+					array_push($literal_strings,$literal);
+	
+					$j++;
+				}
+				else if($c == "\\" && !$escaped)
+					$escaped = true;
+				else
+					$escaped = false;
+	
+				$literal .= $c;
+			}
+		}
+		if($inComment) $literal .= "\n";
+		$clean .= "\n";
+	}
+	//explode the clean string into lines again
+	$lines = explode("\n",$clean);
+	
+	//now process each line at a time
+	for($i=0;$i<count($lines);$i++)
+	{
+		$line = $lines[$i];
+	
+		//remove comments
+		$line = preg_replace("/\/\/(.*)/","",$line);
+	
+		//strip leading and trailing whitespace
+		$line = trim($line);
+	
+		//remove all whitespace with a single space
+		$line = preg_replace("/\s+/"," ",$line);
+	
+		//remove any whitespace that occurs after/before an operator
+		$line = preg_replace("/\s*([!\}\{;,&=\|\-\+\*\/\)\(:])\s*/","\\1",$line);
+	
+		$lines[$i] = $line;
+	}
+	
+	//implode the lines
+	$sJS = implode("\n",$lines);
+	
+	//make sure there is a max of 1 \n after each line
+	$sJS = preg_replace("/[\n]+/","\n",$sJS);
+	
+	//strip out line breaks that immediately follow a semi-colon
+	$sJS = preg_replace("/;\n/",";",$sJS);
+	
+	//curly brackets aren't on their own
+	$sJS = preg_replace("/[\n]*\{[\n]*/","{",$sJS);
+	
+	//finally loop through and replace all the literal strings:
+	for($i=0;$i<count($literal_strings);$i++)
+		$sJS = str_replace("___".$i."___",$literal_strings[$i],$sJS);
+	
+	return $sJS;
+}
+?>
\ No newline at end of file
diff -Naur lib/ajax/xajaxResponse.inc.php lib/ajax/xajaxResponse.inc.php
--- lib/ajax/xajaxResponse.inc.php	1969-12-31 21:00:00.000000000 -0300
+++ lib/ajax/xajaxResponse.inc.php	2006-05-29 18:47:50.000000000 -0300
@@ -0,0 +1,391 @@
+<?php
+///////////////////////////////////////////////////////////////////////////////
+// xajaxResponse.inc.php :: xajax XML response class
+//
+// xajax version 0.2.2
+// copyright (c) 2005 by Jared White & J. Max Wilson
+// http://www.xajaxproject.org
+//
+// xajax is an open source PHP class library for easily creating powerful
+// PHP-driven, web-based Ajax Applications. Using xajax, you can asynchronously
+// call PHP functions and update the content of your your webpage without
+// reloading the page.
+//
+// xajax is released under the terms of the LGPL license
+// http://www.gnu.org/copyleft/lesser.html#SEC3
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+// 
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+///////////////////////////////////////////////////////////////////////////////
+
+/*
+   ----------------------------------------------------------------------------
+   | Online documentation for this class is available on the xajax wiki at:   |
+   | http://wiki.xajaxproject.org/Documentation:xajaxResponse.inc.php         |
+   ----------------------------------------------------------------------------
+*/
+
+// The xajaxResponse class is used to created responses to be sent back to your
+// webpage.  A response contains one or more command messages for updating your page.
+// Currently xajax supports 18 kinds of command messages, including some common ones such as:
+// * Assign - sets the specified attribute of an element in your page
+// * Append - appends data to the end of the specified attribute of an element in your page
+// * Prepend - prepends data to the beginning of the specified attribute of an element in your page
+// * Replace - searches for and replaces data in the specified attribute of an element in your page
+// * Script - runs the supplied JavaScript code
+// * Alert - shows an alert box with the supplied message text
+//
+// *Note: elements are identified by their HTML id, so if you don't see your browser HTML display changing from the request, make sure you're using the right id names in your response.
+
+class xajaxResponse
+{
+	var $xml;
+	var $sEncoding;
+	var $bOutputEntities;
+
+	// Constructor. Its main job is to set the character encoding for the response.
+	// $sEncoding is a string containing the character encoding string to use.
+	// $bOutputEntities lets you set if you want special characters in the output
+	//  converted to HTML entities
+	// * Note: to change the character encoding for all of the responses, set the
+	// XAJAX_DEFAULT_ENCODING constant near the beginning of the xajax.inc.php file
+	function xajaxResponse($sEncoding=XAJAX_DEFAULT_CHAR_ENCODING, $bOutputEntities=false)
+	{
+		$this->setCharEncoding($sEncoding);
+		$this->bOutputEntities = $bOutputEntities;
+	}
+	
+	// setCharEncoding() sets the character encoding for the response based on
+	// $sEncoding, which is a string containing the character encoding to use. You
+	// don't need to use this method normally, since the character encoding for the
+	// response gets set automatically based on the XAJAX_DEFAULT_CHAR_ENCODING
+	// constant.
+	function setCharEncoding($sEncoding)
+	{
+		$this->sEncoding = $sEncoding;
+	}
+	
+	// outputEntitiesOn() tells the response object to convert special characters to
+	// HTML entities automatically (only works if the mb_string extension is available).
+	function outputEntitiesOn()
+	{
+		$this->bOutputEntities = true;
+	}
+	
+	// outputEntitiesOff() tells the response object to output special characters
+	// intact. (default behavior)
+	function outputEntitiesOff()
+	{
+		$this->bOutputEntities = false;
+	}
+	
+	// addAssign() adds an assign command message to the XML response
+	// $sTarget is a string containing the id of an HTML element
+	// $sAttribute is the part of the element you wish to modify ("innerHTML", "value", etc.)
+	// $sData is the data you want to set the attribute to
+	// usage: $objResponse->addAssign("contentDiv", "innerHTML", "Some Text");
+	function addAssign($sTarget,$sAttribute,$sData)
+	{
+		$this->xml .= $this->_cmdXML(array("n"=>"as","t"=>$sTarget,"p"=>$sAttribute),$sData);
+	}
+	
+	// addAppend() adds an append command message to the XML response
+	// $sTarget is a string containing the id of an HTML element
+	// $sAttribute is the part of the element you wish to modify ("innerHTML", "value", etc.)
+	// $sData is the data you want to append to the end of the attribute
+	// usage: $objResponse->addAppend("contentDiv", "innerHTML", "Some New Text");
+	function addAppend($sTarget,$sAttribute,$sData)
+	{	
+		$this->xml .= $this->_cmdXML(array("n"=>"ap","t"=>$sTarget,"p"=>$sAttribute),$sData);
+	}
+	
+	// addPrepend() adds an prepend command message to the XML response
+	// $sTarget is a string containing the id of an HTML element
+	// $sAttribute is the part of the element you wish to modify ("innerHTML", "value", etc.)
+	// $sData is the data you want to prepend to the beginning of the attribute
+	// usage: $objResponse->addPrepend("contentDiv", "innerHTML", "Some Starting Text");
+	function addPrepend($sTarget,$sAttribute,$sData)
+	{
+		$this->xml .= $this->_cmdXML(array("n"=>"pp","t"=>$sTarget,"p"=>$sAttribute),$sData);
+	}
+	
+	// addReplace() adds an replace command message to the XML response
+	// $sTarget is a string containing the id of an HTML element
+	// $sAttribute is the part of the element you wish to modify ("innerHTML", "value", etc.)
+	// $sSearch is a string to search for
+	// $sData is a string to replace the search string when found in the attribute
+	// usage: $objResponse->addReplace("contentDiv", "innerHTML", "text", "<b>text</b>");
+	function addReplace($sTarget,$sAttribute,$sSearch,$sData)
+	{
+		$sDta = "<s><![CDATA[$sSearch]]></s><r><![CDATA[$sData]]></r>";
+		$this->xml .= $this->_cmdXML(array("n"=>"rp","t"=>$sTarget,"p"=>$sAttribute),$sDta);
+	}
+	
+	// addClear() adds an clear command message to the XML response
+	// $sTarget is a string containing the id of an HTML element
+	// $sAttribute is the part of the element you wish to clear ("innerHTML", "value", etc.)
+	// usage: $objResponse->addClear("contentDiv", "innerHTML");
+	function addClear($sTarget,$sAttribute)
+	{
+		$this->addAssign($sTarget,$sAttribute,'');
+	}
+	
+	// addAlert() adds an alert command message to the XML response
+	// $sMsg is the text to be displayed in the Javascript alert box
+	// usage: $objResponse->addAlert("This is important information");
+	function addAlert($sMsg)
+	{
+		$this->xml .= $this->_cmdXML(array("n"=>"al"),$sMsg);
+	}
+	
+	// addRedirect() uses the addScript() method to add a Javascript redirect to
+	// another URL
+	// $sURL is the URL to redirect the client browser to
+	// usage: $objResponse->addRedirect("http://www.xajaxproject.org");
+	function addRedirect($sURL)
+	{
+		//we need to parse the query part so that the values are rawurlencode()'ed
+		//can't just use parse_url() cos we could be dealing with a relative URL which
+		//  parse_url() can't deal with.
+		$queryStart = strpos($sURL, '?', strrpos($sURL, '/'));
+		if ($queryStart !== FALSE)
+		{
+			$queryStart++;
+			$queryEnd = strpos($sURL, '#', $queryStart);
+			if ($queryEnd === FALSE)
+				$queryEnd = strlen($sURL);
+			$queryPart = substr($sURL, $queryStart, $queryEnd-$queryStart);
+			parse_str($queryPart, $queryParts);
+			$newQueryPart = "";
+			foreach($queryParts as $key => $value)
+			{
+				$newQueryPart .= rawurlencode($key).'='.rawurlencode($value).ini_get('arg_separator.output');
+			}
+			$sURL = str_replace($queryPart, $newQueryPart, $sURL);
+		}
+		$this->addScript('window.location = "'.$sURL.'";');
+	}
+
+	// addScript() adds a Javascript command message to the XML response
+	// $sJS is a string containing Javascript code to be executed
+	// usage: $objResponse->addScript("var x = prompt('get some text');");
+	function addScript($sJS)
+	{
+		$this->xml .= $this->_cmdXML(array("n"=>"js"),$sJS);
+	}
+	
+	// addScriptCall() adds a Javascript function call to the XML response.
+	// first argument is a string containing the name of a javascript function
+	// to be called.
+	// all other arguments will be passed to the js function
+	function addScriptCall() {
+	    $arguments = func_get_args();
+	    $sFunc = array_shift($arguments);
+	    $sData = $this->_buildObjXml($arguments);
+	    $this->xml .= $this->_cmdXML(array("n"=>"jc","t"=>$sFunc),$sData);
+	}
+	
+	// addRemove() adds a remove element command message to the XML response
+	// $sTarget is a string containing the id of an HTML element to be removed
+	// from your page
+	// usage: $objResponse->addRemove("Div2");
+	function addRemove($sTarget)
+	{
+		$this->xml .= $this->_cmdXML(array("n"=>"rm","t"=>$sTarget),'');
+	}
+	
+	// addCreate() adds a create element command message to the XML response
+	// $sParent is a string containing the id of an HTML element to which the new
+	// element will be appended.
+	// $sTag is the tag to be added
+	// $sId is the id to be assigned to the new element
+	// $sType has been deprecated, use the addCreateInput() method instead
+	// usage: $objResponse->addCreate("parentDiv", "h3", "myid");
+	function addCreate($sParent, $sTag, $sId, $sType="")
+	{
+		if ($sType)
+		{
+			trigger_error("The \$sType parameter of addCreate has been deprecated.  Use the addCreateInput() method instead.", E_USER_WARNING);
+			return;
+		}
+		$this->xml .= $this->_cmdXML(array("n"=>"ce","t"=>$sParent,"p"=>$sId),$sTag);
+	}
+	
+	// addInsert() adds an insert element command message to the XML response
+	// $sBefore is a string containing the id of the child before which the new element
+	// will be inserted
+	// $sTag is the tag to be added
+	// $sId is the id to be assigned to the new element
+	// usage: $objResponse->addInsert("childDiv", "h3", "myid");
+	function addInsert($sBefore, $sTag, $sId)
+	{
+		$this->xml .= $this->_cmdXML(array("n"=>"ie","t"=>$sBefore,"p"=>$sId),$sTag);
+	}
+
+	// addInsertAfter() adds an insert element command message to the XML response
+	// $sAfter is a string containing the id of the child after which the new element
+	// will be inserted
+	// $sTag is the tag to be added
+	// $sId is the id to be assigned to the new element
+	// usage: $objResponse->addInsertAfter("childDiv", "h3", "myid");	
+	function addInsertAfter($sAfter, $sTag, $sId)
+	{
+		$this->xml .= $this->_cmdXML(array("n"=>"ia","t"=>$sAfter,"p"=>$sId),$sTag);
+	}
+	
+	// addCreateInput() adds a create input command message to the XML response
+	// $sParent is a string containing the id of an HTML element to which the new
+	// input will be appended
+	// $sType is the type of input to be created (text, radio, checkbox, etc.)
+	// $sName is the name to be assigned to the new input and the variable name when it is submitted
+	// $sId is the id to be assigned to the new input
+	// usage: $objResponse->addCreateInput("form1", "text", "username", "input1");
+	function addCreateInput($sParent, $sType, $sName, $sId)
+	{
+		$this->xml .= $this->_cmdXML(array("n"=>"ci","t"=>$sParent,"p"=>$sId,"c"=>$sType),$sName);
+	}
+	
+	// addInsertInput() adds an insert input command message to the XML response
+	// $sBefore is a string containing the id of the child before which the new element
+	// will be inserted
+	// $sType is the type of input to be created (text, radio, checkbox, etc.)
+	// $sName is the name to be assigned to the new input and the variable name when it is submitted
+	// $sId is the id to be assigned to the new input
+	// usage: $objResponse->addInsertInput("input5", "text", "username", "input1");
+	function addInsertInput($sBefore, $sType, $sName, $sId)
+	{
+		$this->xml .= $this->_cmdXML(array("n"=>"ii","t"=>$sBefore,"p"=>$sId,"c"=>$sType),$sName);
+	}
+	
+	// addEvent() adds an event command message to the XML response
+	// $sTarget is a string containing the id of an HTML element
+	// $sEvent is the event you wish to set ("click", "mouseover", etc.)
+	// $sScript is the Javascript string you want to the event to invoke
+	// usage: $objResponse->addEvent("contentDiv", "click", "alert(\'Hello World\');");
+	function addEvent($sTarget,$sEvent,$sScript)
+	{
+		$this->xml .= $this->_cmdXML(array("n"=>"ev","t"=>$sTarget,"p"=>$sEvent),$sScript);
+	}
+	
+	// addHandler() adds a handler command message to the XML response
+	// $sTarget is a string containing the id of an HTML element
+	// $sEvent is the event you wish to set ("click", "mouseover", etc.)
+	// $sHandler is a string containing the name of a Javascript function
+	// that will handle the event. Multiple handlers can be added for the same event
+	// usage: $objResponse->addHandler("contentDiv", "click", "content_click");
+	function addHandler($sTarget,$sEvent,$sHandler)
+	{	
+		$this->xml .= $this->_cmdXML(array("n"=>"ah","t"=>$sTarget,"p"=>$sEvent),$sHandler);
+	}
+	
+	// addRemoveHandler() adds a remove handler command message to the XML response
+	// $sTarget is a string containing the id of an HTML element
+	// $sEvent is the event you wish to remove ("click", "mouseover", etc.)
+	// $sHandler is a string containing the name of a Javascript handler function
+	// that you want to remove
+	// usage: $objResponse->addRemoveHandler("contentDiv", "click", "content_click");
+	function addRemoveHandler($sTarget,$sEvent,$sHandler)
+	{	
+		$this->xml .= $this->_cmdXML(array("n"=>"rh","t"=>$sTarget,"p"=>$sEvent),$sHandler);
+	}
+	
+	// addIncludeScript() adds an include script command message to the XML response
+	// $sFileName is a URL of the Javascript file to include
+	// usage: $objResponse->addIncludeScript("functions.js");
+	function addIncludeScript($sFileName)
+	{
+		$this->xml .= $this->_cmdXML(array("n"=>"in"),$sFileName);
+	}
+	
+	// getXML() returns the XML to be returned from your function to the xajax
+	// processor on your page. Since xajax 0.2, you can also return an xajaxResponse
+	// object from your function directly, and xajax will automatically request the
+	// XML using this method call.
+	// usage: return $objResponse->getXML();
+	function getXML()
+	{
+		$sXML = "<?xml version=\"1.0\"";
+		if ($this->sEncoding && strlen(trim($this->sEncoding)) > 0)
+			$sXML .= " encoding=\"".$this->sEncoding."\"";
+		$sXML .= " ?"."><xjx>" . $this->xml . "</xjx>";
+		
+		return $sXML;
+	}
+	
+	// loadXML() adds the commands of the provided response XML output to this
+	// response object
+	// $sXML is the response XML (returned from a getXML() method) to add to the
+	// end of this response object
+	// usage: $r1 = $objResponse1->getXML();
+	//        $objResponse2->loadXML($r1);
+	//        return $objResponse2->getXML();
+	function loadXML($mXML)
+	{
+		if (is_a($mXML, "xajaxResponse")) {
+			$mXML = $mXML->getXML();
+		}
+		$sNewXML = "";
+		$iStartPos = strpos($mXML, "<xjx>") + 5;
+		$sNewXML = substr($mXML, $iStartPos);
+		$iEndPos = strpos($sNewXML, "</xjx>");
+		$sNewXML = substr($sNewXML, 0, $iEndPos);
+		$this->xml .= $sNewXML;
+	}
+
+	// private method, used internally
+	function _cmdXML($aAttributes, $sData)
+	{
+		if ($this->bOutputEntities) {
+			if (function_exists('mb_convert_encoding')) {
+				$sData = call_user_func_array('mb_convert_encoding', array(&$sData, 'HTML-ENTITIES', $this->sEncoding));
+			}
+			else {
+				trigger_error("The xajax XML response output could not be converted to HTML entities because the mb_convert_encoding function is not available", E_USER_NOTICE);
+			}
+		}
+		$xml = "<cmd";
+		foreach($aAttributes as $sAttribute => $sValue)
+			$xml .= " $sAttribute=\"$sValue\"";
+		if ($sData !== null && !stristr($sData,'<![CDATA['))
+			$xml .= "><![CDATA[$sData]]></cmd>";
+		else if ($sData !== null)
+			$xml .= ">$sData</cmd>";
+		else
+			$xml .= "></cmd>";
+		
+		return $xml;
+	}
+	
+	// _buildObjXml() is the opposite of xajax::_parseObjXml()
+	// recursively serializes a data structure in xml so it can be sent to client
+	function _buildObjXml($var) {
+	    if (!is_array($var)) {
+		// CDATA might increase network usage a lot,
+		// make a check here?
+		return "<![CDATA[$var]]>";
+	    } else {
+		$data = "<xjxobj>";
+		foreach ($var as $key => $value) {
+		    $data .= "<e>";
+		    $data .= "<k>$key</k>"; //needs treat for keys containing <>
+		    $data .= "<v>" . $this->_buildObjXml($value) . "</v>";
+		    $data .= "</e>";
+		}
+		$data .= "</xjxobj>";
+		return $data;
+	    }
+	}
+	
+}// end class xajaxResponse
+?>
diff -Naur lib/ajax/xajax_js/xajax.js lib/ajax/xajax_js/xajax.js
--- lib/ajax/xajax_js/xajax.js	1969-12-31 21:00:00.000000000 -0300
+++ lib/ajax/xajax_js/xajax.js	2006-05-29 18:47:50.000000000 -0300
@@ -0,0 +1,172 @@
+/* xajax Javascript library :: version 0.2.4 */
+Array.prototype.containsValue=function(valueToCheck){for(var i=0;i<this.length;i++){if(this[i]==valueToCheck)return true;}
+return false;}
+function Xajax(){this.DebugMessage=function(text){if(text.length > 1000)text=text.substr(0,1000)+"...\n[long response]\n...";try{if(this.debugWindow==undefined||this.debugWindow.closed==true){this.debugWindow=window.open('about:blank','xajax-debug','width=800,height=600,scrollbars=1,resizable,status');this.debugWindow.document.write('<html><head><title>Xajax debug output</title></head><body><h2>Xajax debug output</h2><div id="debugTag"></div></body></html>');}
+text=text.replace(/&/g,"&amp;")
+text=text.replace(/</g,"&lt;")
+text=text.replace(/>/g,"&gt;")
+debugTag=this.debugWindow.document.getElementById('debugTag');debugTag.innerHTML=('<b>'+(new Date()).toString()+'</b>: '+text+'<hr/>')+debugTag.innerHTML;}catch(e){alert("Xajax Debug:\n "+text);}
+};this.workId='xajaxWork'+new Date().getTime();this.depth=0;this.responseErrorsForAlert=["400","401","402","403","404","500","501","502","503"];this.getRequestObject=function(){if(xajaxDebug)this.DebugMessage("Initializing Request Object..");var req=null;if(typeof XMLHttpRequest!="undefined")
+req=new XMLHttpRequest();if(!req&&typeof ActiveXObject!="undefined"){try{req=new ActiveXObject("Msxml2.XMLHTTP");}
+catch(e){try{req=new ActiveXObject("Microsoft.XMLHTTP");}
+catch(e2){try{req=new ActiveXObject("Msxml2.XMLHTTP.4.0");}
+catch(e3){req=null;}
+}
+}
+}
+if(!req&&window.createRequest)
+req=window.createRequest();if(!req)this.DebugMessage("Request Object Instantiation failed.");return req;}
+this.$=function(sId){if(!sId){return null;}
+var returnObj=document.getElementById(sId);if(!returnObj&&document.all){returnObj=document.all[sId];}
+if(xajaxDebug&&!returnObj&&sId!=this.workId){this.DebugMessage("Element with the id \""+sId+"\" not found.");}
+return returnObj;}
+this.include=function(sFileName){var objHead=document.getElementsByTagName('head');var objScript=document.createElement('script');objScript.type='text/javascript';objScript.src=sFileName;objHead[0].appendChild(objScript);}
+this.stripOnPrefix=function(sEventName){sEventName=sEventName.toLowerCase();if(sEventName.indexOf('on')==0){sEventName=sEventName.replace(/on/,'');}
+return sEventName;}
+this.addOnPrefix=function(sEventName){sEventName=sEventName.toLowerCase();if(sEventName.indexOf('on')!=0){sEventName='on'+sEventName;}
+return sEventName;}
+this.addHandler=function(sElementId,sEvent,sFunctionName){if(window.addEventListener){sEvent=this.stripOnPrefix(sEvent);eval("this.$('"+sElementId+"').addEventListener('"+sEvent+"',"+sFunctionName+",false);");}
+else{sAltEvent=this.addOnPrefix(sEvent);eval("this.$('"+sElementId+"').attachEvent('"+sAltEvent+"',"+sFunctionName+",false);");}
+}
+this.removeHandler=function(sElementId,sEvent,sFunctionName){if(window.addEventListener){sEvent=this.stripOnPrefix(sEvent);eval("this.$('"+sElementId+"').removeEventListener('"+sEvent+"',"+sFunctionName+",false);");}
+else{sAltEvent=this.addOnPrefix(sEvent);eval("this.$('"+sElementId+"').detachEvent('"+sAltEvent+"',"+sFunctionName+",false);");}
+}
+this.create=function(sParentId,sTag,sId){var objParent=this.$(sParentId);objElement=document.createElement(sTag);objElement.setAttribute('id',sId);if(objParent)
+objParent.appendChild(objElement);}
+this.insert=function(sBeforeId,sTag,sId){var objSibling=this.$(sBeforeId);objElement=document.createElement(sTag);objElement.setAttribute('id',sId);objSibling.parentNode.insertBefore(objElement,objSibling);}
+this.insertAfter=function(sAfterId,sTag,sId){var objSibling=this.$(sAfterId);objElement=document.createElement(sTag);objElement.setAttribute('id',sId);objSibling.parentNode.insertBefore(objElement,objSibling.nextSibling);}
+this.getInput=function(sType,sName,sId){var Obj;if(!window.addEventListener){Obj=document.createElement('<input type="'+sType+'" id="'+sId+'" name="'+sName+'">');}
+else{Obj=document.createElement('input');Obj.setAttribute('type',sType);Obj.setAttribute('name',sName);Obj.setAttribute('id',sId);}
+return Obj;}
+this.createInput=function(sParentId,sType,sName,sId){var objParent=this.$(sParentId);var objElement=this.getInput(sType,sName,sId);if(objParent&&objElement)
+objParent.appendChild(objElement);}
+this.insertInput=function(sBeforeId,sType,sName,sId){var objSibling=this.$(sBeforeId);var objElement=this.getInput(sType,sName,sId);if(objElement&&objSibling&&objSibling.parentNode)
+objSibling.parentNode.insertBefore(objElement,objSibling);}
+this.insertInputAfter=function(sAfterId,sType,sName,sId){var objSibling=this.$(sAfterId);var objElement=this.getInput(sType,sName,sId);if(objElement&&objSibling&&objSibling.parentNode){objSibling.parentNode.insertBefore(objElement,objSibling.nextSibling);}
+}
+this.remove=function(sId){objElement=this.$(sId);if(objElement&&objElement.parentNode&&objElement.parentNode.removeChild){objElement.parentNode.removeChild(objElement);}
+}
+this.replace=function(sId,sAttribute,sSearch,sReplace){var bFunction=false;if(sAttribute=="innerHTML")
+sSearch=this.getBrowserHTML(sSearch);eval("var txt=this.$('"+sId+"')."+sAttribute);if(typeof txt=="function"){txt=txt.toString();bFunction=true;}
+if(txt.indexOf(sSearch)>-1){var newTxt='';while(txt.indexOf(sSearch)>-1){x=txt.indexOf(sSearch)+sSearch.length+1;newTxt+=txt.substr(0,x).replace(sSearch,sReplace);txt=txt.substr(x,txt.length-x);}
+newTxt+=txt;if(bFunction){eval('this.$("'+sId+'").'+sAttribute+'=newTxt;');}
+else if(this.willChange(sId,sAttribute,newTxt)){eval('this.$("'+sId+'").'+sAttribute+'=newTxt;');}
+}
+}
+this.getFormValues=function(frm){var objForm;var submitDisabledElements=false;if(arguments.length > 1&&arguments[1]==true)
+submitDisabledElements=true;var prefix="";if(arguments.length > 2)
+prefix=arguments[2];if(typeof(frm)=="string")
+objForm=this.$(frm);else
+objForm=frm;var sXml="<xjxquery><q>";if(objForm&&objForm.tagName=='FORM'){var formElements=objForm.elements;for(var i=0;i < formElements.length;i++){if(!formElements[i].name)
+continue;if(formElements[i].name.substring(0,prefix.length)!=prefix)
+continue;if(formElements[i].type&&(formElements[i].type=='radio'||formElements[i].type=='checkbox')&&formElements[i].checked==false)
+continue;if(formElements[i].disabled&&formElements[i].disabled==true&&submitDisabledElements==false)
+continue;var name=formElements[i].name;if(name){if(sXml!='<xjxquery><q>')
+sXml+='&';if(formElements[i].type=='select-multiple'){for(var j=0;j < formElements[i].length;j++){if(formElements[i].options[j].selected==true)
+sXml+=name+"="+encodeURIComponent(formElements[i].options[j].value)+"&";}
+}
+else{sXml+=name+"="+encodeURIComponent(formElements[i].value);}
+}
+}
+}
+sXml+="</q></xjxquery>";return sXml;}
+this.objectToXML=function(obj){var sXml="<xjxobj>";for(i in obj){try{if(i=='constructor')
+continue;if(obj[i]&&typeof(obj[i])=='function')
+continue;var key=i;var value=obj[i];if(value&&typeof(value)=="object"&&this.depth <=50){this.depth++;value=this.objectToXML(value);this.depth--;}
+sXml+="<e><k>"+key+"</k><v>"+value+"</v></e>";}
+catch(e){if(xajaxDebug)this.DebugMessage(e.name+": "+e.message);}
+}
+sXml+="</xjxobj>";return sXml;}
+this._nodeToObject=function(node){if(node.nodeName=='#cdata-section'){var data="";for(var j=0;j<node.parentNode.childNodes.length;j++){data+=node.parentNode.childNodes[j].data;}
+return data;}
+else if(node.nodeName=='xjxobj'){var data=new Array();for(var j=0;j<node.childNodes.length;j++){var child=node.childNodes[j];var key;var value;if(child.nodeName=='e'){for(var k=0;k<child.childNodes.length;k++){if(child.childNodes[k].nodeName=='k'){key=child.childNodes[k].firstChild.data;}
+else if(child.childNodes[k].nodeName=='v'){value=this._nodeToObject(child.childNodes[k].firstChild);}
+}
+if(key!=null&&value!=null){data[key]=value;key=value=null;}
+}
+}
+return data;}
+}
+this.loadingFunction=function(){};this.doneLoadingFunction=function(){};var loadingTimeout;this.call=function(sFunction,aArgs,sRequestType){var i,r,postData;if(document.body&&xajaxWaitCursor)
+document.body.style.cursor='wait';if(xajaxStatusMessages==true)window.status='Sending Request...';clearTimeout(loadingTimeout);loadingTimeout=setTimeout("xajax.loadingFunction();",400);if(xajaxDebug)this.DebugMessage("Starting xajax...");if(sRequestType==null){var xajaxRequestType=xajaxDefinedPost;}
+else{var xajaxRequestType=sRequestType;}
+var uri=xajaxRequestUri;var value;switch(xajaxRequestType){case xajaxDefinedGet:{var uriGet=uri.indexOf("?")==-1?"?xajax="+encodeURIComponent(sFunction):"&xajax="+encodeURIComponent(sFunction);if(aArgs){for(i=0;i<aArgs.length;i++){value=aArgs[i];if(typeof(value)=="object")
+value=this.objectToXML(value);uriGet+="&xajaxargs[]="+encodeURIComponent(value);}
+}
+uriGet+="&xajaxr="+new Date().getTime();uri+=uriGet;postData=null;}break;case xajaxDefinedPost:{postData="xajax="+encodeURIComponent(sFunction);postData+="&xajaxr="+new Date().getTime();if(aArgs){for(i=0;i <aArgs.length;i++){value=aArgs[i];if(typeof(value)=="object")
+value=this.objectToXML(value);postData=postData+"&xajaxargs[]="+encodeURIComponent(value);}
+}
+}break;default:
+alert("Illegal request type: "+xajaxRequestType);return false;break;}
+r=this.getRequestObject();if(!r)return false;r.open(xajaxRequestType==xajaxDefinedGet?"GET":"POST",uri,true);if(xajaxRequestType==xajaxDefinedPost){try{r.setRequestHeader("Method","POST "+uri+" HTTP/1.1");r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");}
+catch(e){alert("Your browser does not appear to  support asynchronous requests using POST.");return false;}
+}
+r.onreadystatechange=function(){if(r.readyState!=4)
+return;if(r.status==200){if(xajaxDebug)xajax.DebugMessage("Received:\n"+r.responseText);if(r.responseXML&&r.responseXML.documentElement)
+xajax.processResponse(r.responseXML);else{var errorString="Error: the XML response that was returned from the server is invalid.";errorString+="\nReceived:\n"+r.responseText;trimmedResponseText=r.responseText.replace(/^\s+/g,"");trimmedResponseText=trimmedResponseText.replace(/\s+$/g,"");if(trimmedResponseText!=r.responseText)
+errorString+="\nYou have whitespace in your response.";alert(errorString);document.body.style.cursor='default';if(xajaxStatusMessages==true)window.status='Invalid XML response error';}
+}
+else{if(xajax.responseErrorsForAlert.containsValue(r.status)){var errorString="Error: the server returned the following HTTP status: "+r.status;errorString+="\nReceived:\n"+r.responseText;alert(errorString);}
+document.body.style.cursor='default';if(xajaxStatusMessages==true)window.status='Invalid XML response error';}
+delete r;r=null;}
+if(xajaxDebug)this.DebugMessage("Calling "+sFunction+" uri="+uri+" (post:"+postData+")");r.send(postData);if(xajaxStatusMessages==true)window.status='Waiting for data...';delete r;return true;}
+this.getBrowserHTML=function(html){tmpXajax=this.$(this.workId);if(!tmpXajax){tmpXajax=document.createElement("div");tmpXajax.setAttribute('id',this.workId);tmpXajax.style.display="none";tmpXajax.style.visibility="hidden";document.body.appendChild(tmpXajax);}
+tmpXajax.innerHTML=html;var browserHTML=tmpXajax.innerHTML;tmpXajax.innerHTML='';return browserHTML;}
+this.willChange=function(element,attribute,newData){if(!document.body){return true;}
+if(attribute=="innerHTML"){newData=this.getBrowserHTML(newData);}
+elementObject=this.$(element);if(elementObject){var oldData;eval("oldData=this.$('"+element+"')."+attribute);if(newData!==oldData)
+return true;}
+return false;}
+this.viewSource=function(){return "<html>"+document.getElementsByTagName("HTML")[0].innerHTML+"</html>";}
+this.processResponse=function(xml){clearTimeout(loadingTimeout);this.doneLoadingFunction();if(xajaxStatusMessages==true)window.status='Processing...';var tmpXajax=null;xml=xml.documentElement;if(xml==null)
+return;var skipCommands=0;for(var i=0;i<xml.childNodes.length;i++){if(skipCommands > 0){skipCommands--;continue;}
+if(xml.childNodes[i].nodeName=="cmd"){var cmd;var id;var property;var data;var search;var type;var before;var objElement=null;for(var j=0;j<xml.childNodes[i].attributes.length;j++){if(xml.childNodes[i].attributes[j].name=="n"){cmd=xml.childNodes[i].attributes[j].value;}
+else if(xml.childNodes[i].attributes[j].name=="t"){id=xml.childNodes[i].attributes[j].value;}
+else if(xml.childNodes[i].attributes[j].name=="p"){property=xml.childNodes[i].attributes[j].value;}
+else if(xml.childNodes[i].attributes[j].name=="c"){type=xml.childNodes[i].attributes[j].value;}
+}
+if(xml.childNodes[i].childNodes.length > 1&&xml.childNodes[i].firstChild.nodeName=="#cdata-section"){data="";for(var j=0;j<xml.childNodes[i].childNodes.length;j++){data+=xml.childNodes[i].childNodes[j].data;}
+}
+else if(xml.childNodes[i].firstChild&&xml.childNodes[i].firstChild.nodeName=='xjxobj'){data=this._nodeToObject(xml.childNodes[i].firstChild);objElement="XJX_SKIP";}
+else if(xml.childNodes[i].childNodes.length > 1){for(var j=0;j<xml.childNodes[i].childNodes.length;j++){if(xml.childNodes[i].childNodes[j].childNodes.length > 1&&xml.childNodes[i].childNodes[j].firstChild.nodeName=="#cdata-section"){var internalData="";for(var k=0;k<xml.childNodes[i].childNodes[j].childNodes.length;k++){internalData+=xml.childNodes[i].childNodes[j].childNodes[k].nodeValue;}
+}else{var internalData=xml.childNodes[i].childNodes[j].firstChild.nodeValue;}
+if(xml.childNodes[i].childNodes[j].nodeName=="s"){search=internalData;}
+if(xml.childNodes[i].childNodes[j].nodeName=="r"){data=internalData;}
+}
+}
+else if(xml.childNodes[i].firstChild)
+data=xml.childNodes[i].firstChild.nodeValue;else
+data="";if(objElement!="XJX_SKIP")objElement=this.$(id);var cmdFullname;try{if(cmd=="cc"){cmdFullname="addConfirmCommands";var confirmResult=confirm(data);if(!confirmResult){skipCommands=id;}
+}
+if(cmd=="al"){cmdFullname="addAlert";alert(data);}
+else if(cmd=="js"){cmdFullname="addScript/addRedirect";eval(data);}
+else if(cmd=="jc"){cmdFullname="addScriptCall";var scr=id+'(';if(data[0]!=null){scr+='data[0]';for(var l=1;l<data.length;l++){scr+=',data['+l+']';}
+}
+scr+=');';eval(scr);}
+else if(cmd=="in"){cmdFullname="addIncludeScript";this.include(data);}
+else if(cmd=="as"){cmdFullname="addAssign/addClear";if(this.willChange(id,property,data)){eval("objElement."+property+"=data;");}
+}
+else if(cmd=="ap"){cmdFullname="addAppend";eval("objElement."+property+"+=data;");}
+else if(cmd=="pp"){cmdFullname="addPrepend";eval("objElement."+property+"=data+objElement."+property);}
+else if(cmd=="rp"){cmdFullname="addReplace";this.replace(id,property,search,data)
+}
+else if(cmd=="rm"){cmdFullname="addRemove";this.remove(id);}
+else if(cmd=="ce"){cmdFullname="addCreate";this.create(id,data,property);}
+else if(cmd=="ie"){cmdFullname="addInsert";this.insert(id,data,property);}
+else if(cmd=="ia"){cmdFullname="addInsertAfter";this.insertAfter(id,data,property);}
+else if(cmd=="ci"){cmdFullname="addCreateInput";this.createInput(id,type,data,property);}
+else if(cmd=="ii"){cmdFullname="addInsertInput";this.insertInput(id,type,data,property);}
+else if(cmd=="iia"){cmdFullname="addInsertInputAfter";this.insertInputAfter(id,type,data,property);}
+else if(cmd=="ev"){cmdFullname="addEvent";property=this.addOnPrefix(property);eval("this.$('"+id+"')."+property+"= function(){"+data+";}");}
+else if(cmd=="ah"){cmdFullname="addHandler";this.addHandler(id,property,data);}
+else if(cmd=="rh"){cmdFullname="addRemoveHandler";this.removeHandler(id,property,data);}
+}
+catch(e){if(xajaxDebug)
+alert("While trying to '"+cmdFullname+"' (command number "+i+"), the following error occured:\n"
++e.name+": "+e.message+"\n"
++(id&&!objElement?"Object with id='"+id+"' wasn't found.\n":""));}
+delete objElement;delete cmd;delete cmdFullname;delete id;delete property;delete search;delete data;delete type;delete before;delete internalData;delete j;delete k;}
+}
+delete xml;delete i;document.body.style.cursor='default';if(xajaxStatusMessages==true)window.status='Done';}
+}
+var xajax=new Xajax();xajaxLoaded=true;
\ No newline at end of file
diff -Naur lib/ajax/xajax_js/xajax_uncompressed.js lib/ajax/xajax_js/xajax_uncompressed.js
--- lib/ajax/xajax_js/xajax_uncompressed.js	1969-12-31 21:00:00.000000000 -0300
+++ lib/ajax/xajax_js/xajax_uncompressed.js	2006-05-29 18:47:50.000000000 -0300
@@ -0,0 +1,795 @@
+/* xajax Javascript library :: version 0.2.4 */
+
+Array.prototype.containsValue = function(valueToCheck)
+{
+	for (var i=0;i<this.length;i++) {
+		if (this[i] == valueToCheck) return true;
+	}
+	return false;
+}
+
+function Xajax()
+{
+	this.DebugMessage = function(text)
+	{
+		if (text.length > 1000) text = text.substr(0,1000)+"...\n[long response]\n...";
+		try {
+			if (this.debugWindow == undefined || this.debugWindow.closed == true) {
+				this.debugWindow = window.open('about:blank', 'xajax-debug', 'width=800,height=600,scrollbars=1,resizable,status');
+				this.debugWindow.document.write('<html><head><title>Xajax debug output</title></head><body><h2>Xajax debug output</h2><div id="debugTag"></div></body></html>');
+			}
+			text = text.replace(/&/g, "&amp;")
+			text = text.replace(/</g, "&lt;")
+			text = text.replace(/>/g, "&gt;")
+			debugTag = this.debugWindow.document.getElementById('debugTag');
+			debugTag.innerHTML = ('<b>'+(new Date()).toString()+'</b>: ' + text + '<hr/>') + debugTag.innerHTML;
+		} catch (e) {
+			alert("Xajax Debug:\n " + text);
+		}
+	};
+	
+	this.workId = 'xajaxWork'+ new Date().getTime();
+	this.depth = 0;
+	this.responseErrorsForAlert = ["400","401","402","403","404","500","501","502","503"];
+	
+	//Get the XMLHttpRequest Object
+	this.getRequestObject = function()
+	{
+		if (xajaxDebug) this.DebugMessage("Initializing Request Object..");
+		var req = null;
+		if (typeof XMLHttpRequest != "undefined")
+			req = new XMLHttpRequest();
+		if (!req && typeof ActiveXObject != "undefined")
+		{
+			try
+			{
+				req=new ActiveXObject("Msxml2.XMLHTTP");
+			}
+			catch (e)
+			{
+				try
+				{
+					req=new ActiveXObject("Microsoft.XMLHTTP");
+				}
+				catch (e2)
+				{
+					try {
+						req=new ActiveXObject("Msxml2.XMLHTTP.4.0");
+					}
+					catch (e3)
+					{
+						req=null;
+					}
+				}
+			}
+		}
+		if(!req && window.createRequest)
+			req = window.createRequest();
+		
+		if (!req) this.DebugMessage("Request Object Instantiation failed.");
+			
+		return req;
+	}
+
+	// xajax.$() is shorthand for document.getElementById()
+	this.$ = function(sId)
+	{
+		if (!sId) {
+			return null;
+		}
+		var returnObj = document.getElementById(sId);
+		if (!returnObj && document.all) {
+			returnObj = document.all[sId];
+		}
+		if (xajaxDebug && !returnObj && sId != this.workId) {
+			this.DebugMessage("Element with the id \"" + sId + "\" not found.");
+		}
+		return returnObj;
+	}
+	
+	// xajax.include(sFileName) dynamically includes an external javascript file
+	this.include = function(sFileName)
+	{
+		var objHead = document.getElementsByTagName('head');
+		var objScript = document.createElement('script');
+		objScript.type = 'text/javascript';
+		objScript.src = sFileName;
+		objHead[0].appendChild(objScript);
+	}
+	
+	this.stripOnPrefix = function(sEventName)
+	{
+		sEventName = sEventName.toLowerCase();
+		if (sEventName.indexOf('on') == 0)
+		{
+			sEventName = sEventName.replace(/on/,'');
+		}
+		
+		return sEventName;
+	}
+	
+	this.addOnPrefix = function(sEventName)
+	{
+		sEventName = sEventName.toLowerCase();
+		if (sEventName.indexOf('on') != 0)
+		{
+			sEventName = 'on' + sEventName;
+		}
+		
+		return sEventName;
+	}
+	
+	// xajax.addHandler adds an event handler to an element
+	this.addHandler = function(sElementId, sEvent, sFunctionName)
+	{
+		if (window.addEventListener)
+		{
+			sEvent = this.stripOnPrefix(sEvent);
+			eval("this.$('"+sElementId+"').addEventListener('"+sEvent+"',"+sFunctionName+",false);");
+		}
+		else
+		{
+			sAltEvent = this.addOnPrefix(sEvent);
+			eval("this.$('"+sElementId+"').attachEvent('"+sAltEvent+"',"+sFunctionName+",false);");
+		}
+	}
+	
+	// xajax.removeHandler removes an event handler from an element
+	this.removeHandler = function(sElementId, sEvent, sFunctionName)
+	{
+		if (window.addEventListener)
+		{
+			sEvent = this.stripOnPrefix(sEvent);
+			eval("this.$('"+sElementId+"').removeEventListener('"+sEvent+"',"+sFunctionName+",false);");
+		}
+		else
+		{
+			sAltEvent = this.addOnPrefix(sEvent);
+			eval("this.$('"+sElementId+"').detachEvent('"+sAltEvent+"',"+sFunctionName+",false);");
+		}
+	}
+	
+	// xajax.create creates a new child node under a parent
+	this.create = function(sParentId, sTag, sId)
+	{
+		var objParent = this.$(sParentId);
+		objElement = document.createElement(sTag);
+		objElement.setAttribute('id',sId);
+		if (objParent)
+			objParent.appendChild(objElement);
+	}
+	
+	// xajax.insert inserts a new node before another node
+	this.insert = function(sBeforeId, sTag, sId)
+	{
+		var objSibling = this.$(sBeforeId);
+		objElement = document.createElement(sTag);
+		objElement.setAttribute('id',sId);
+		objSibling.parentNode.insertBefore(objElement, objSibling);
+	}
+
+	// xajax.insertAfter inserts a new node after another node
+	this.insertAfter = function(sAfterId, sTag, sId)
+	{
+		var objSibling = this.$(sAfterId);
+		objElement = document.createElement(sTag);
+		objElement.setAttribute('id',sId);
+		objSibling.parentNode.insertBefore(objElement, objSibling.nextSibling);
+	}
+	
+	this.getInput = function(sType, sName, sId)
+	{
+		var Obj;
+		if (!window.addEventListener)
+		{
+			Obj = document.createElement('<input type="'+sType+'" id="'+sId+'" name="'+sName+'">');
+		}
+		else
+		{
+			Obj = document.createElement('input');
+			Obj.setAttribute('type',sType);
+			Obj.setAttribute('name',sName);
+			Obj.setAttribute('id',sId);
+		}
+		return Obj;
+	}
+	
+	// xajax.createInput creates a new input node under a parent
+	this.createInput = function(sParentId, sType, sName, sId)
+	{
+		var objParent = this.$(sParentId);
+		var objElement = this.getInput(sType, sName, sId);
+		if (objParent && objElement)
+			objParent.appendChild(objElement);
+	}
+	
+	// xajax.insertInput creates a new input node before another node
+	this.insertInput = function(sBeforeId, sType, sName, sId)
+	{
+		var objSibling = this.$(sBeforeId);
+		var objElement = this.getInput(sType, sName, sId);
+		if (objElement && objSibling && objSibling.parentNode)
+			objSibling.parentNode.insertBefore(objElement, objSibling);
+	}
+
+	// xajax.insertInputAfter creates a new input node after another node
+	this.insertInputAfter = function(sAfterId, sType, sName, sId)
+	{
+		var objSibling = this.$(sAfterId);
+		var objElement = this.getInput(sType, sName, sId);
+		if (objElement && objSibling && objSibling.parentNode) {
+			objSibling.parentNode.insertBefore(objElement, objSibling.nextSibling);
+		}
+	}
+		
+	// xajax.remove deletes an element
+	this.remove = function(sId)
+	{
+		objElement = this.$(sId);
+		if (objElement && objElement.parentNode && objElement.parentNode.removeChild)
+		{
+			objElement.parentNode.removeChild(objElement);
+		}
+	}
+	
+	//xajax.replace searches for text in an attribute of an element and replaces it
+	//with a different text
+	this.replace = function(sId,sAttribute,sSearch,sReplace)
+	{
+		var bFunction = false;
+		
+		if (sAttribute == "innerHTML")
+			sSearch = this.getBrowserHTML(sSearch);
+		
+		eval("var txt=this.$('"+sId+"')."+sAttribute);
+		if (typeof txt == "function")
+        {
+            txt = txt.toString();
+            bFunction = true;
+        }
+		if (txt.indexOf(sSearch)>-1)
+		{
+			var newTxt = '';
+			while (txt.indexOf(sSearch) > -1)
+			{
+				x = txt.indexOf(sSearch)+sSearch.length+1;
+				newTxt += txt.substr(0,x).replace(sSearch,sReplace);
+				txt = txt.substr(x,txt.length-x);
+			}
+			newTxt += txt;
+			if (bFunction)
+			{
+				eval('this.$("'+sId+'").'+sAttribute+'=newTxt;');
+			}
+			else if (this.willChange(sId,sAttribute,newTxt))
+			{
+				eval('this.$("'+sId+'").'+sAttribute+'=newTxt;');
+			}
+		}
+	}
+	
+	// xajax.getFormValues() builds a query string XML message from the elements of a form object
+	// * The first argument is the id of the form
+	// * The second argument (optional) can be set to true if you want to submit disabled elements
+	// * The third argument (optional) allows you to specify a string prefix that a form element
+	//   name must contain if you want that element to be submitted
+	this.getFormValues = function(frm)
+	{
+		var objForm;
+		var submitDisabledElements = false;
+		if (arguments.length > 1 && arguments[1] == true)
+			submitDisabledElements = true;
+		var prefix="";
+		if(arguments.length > 2)
+			prefix = arguments[2];
+		
+		if (typeof(frm) == "string")
+			objForm = this.$(frm);
+		else
+			objForm = frm;
+		var sXml = "<xjxquery><q>";
+		if (objForm && objForm.tagName == 'FORM')
+		{
+			var formElements = objForm.elements;
+			for( var i=0; i < formElements.length; i++)
+			{
+				if (!formElements[i].name)
+					continue;
+				if (formElements[i].name.substring(0, prefix.length) != prefix)
+					continue;
+				if (formElements[i].type && (formElements[i].type == 'radio' || formElements[i].type == 'checkbox') && formElements[i].checked == false)
+					continue;
+				if (formElements[i].disabled && formElements[i].disabled == true && submitDisabledElements == false)
+					continue;
+				var name = formElements[i].name;
+				if (name)
+				{
+					if (sXml != '<xjxquery><q>')
+						sXml += '&';
+					if(formElements[i].type=='select-multiple')
+					{
+						for (var j = 0; j < formElements[i].length; j++)
+						{
+							if (formElements[i].options[j].selected == true)
+								sXml += name+"="+encodeURIComponent(formElements[i].options[j].value)+"&";
+						}
+					}
+					else
+					{
+						sXml += name+"="+encodeURIComponent(formElements[i].value);
+					}
+				} 
+			}
+		}
+		
+		sXml +="</q></xjxquery>";
+		
+		return sXml;
+	}
+	
+	// Generates an XML message that xajax can understand from a javascript object
+	this.objectToXML = function(obj)
+	{
+		var sXml = "<xjxobj>";
+		for (i in obj)
+		{
+			try
+			{
+				if (i == 'constructor')
+					continue;
+				if (obj[i] && typeof(obj[i]) == 'function')
+					continue;
+					
+				var key = i;
+				var value = obj[i];
+				if (value && typeof(value)=="object" && this.depth <= 50)
+				{
+					this.depth++;
+					value = this.objectToXML(value);
+					this.depth--;
+				}
+				
+				sXml += "<e><k>"+key+"</k><v>"+value+"</v></e>";
+				
+			}
+			catch(e)
+			{
+				if (xajaxDebug) this.DebugMessage(e.name+": "+e.message);
+			}
+		}
+		sXml += "</xjxobj>";
+	
+		return sXml;
+	}
+
+	// unserializes data structure from xajaxResponse::_buildObjXml()
+	this._nodeToObject = function(node) {
+		// parentNode here is weird, have to tune
+		if (node.nodeName == '#cdata-section') {
+			var data = "";
+			for (var j=0; j<node.parentNode.childNodes.length; j++) {
+				data += node.parentNode.childNodes[j].data;
+			}
+			return data;
+		}
+		else if (node.nodeName == 'xjxobj') {
+			var data = new Array();
+			for (var j=0; j<node.childNodes.length; j++) {
+				var child = node.childNodes[j];
+				var key;
+				var value;
+				if (child.nodeName == 'e') {
+					for (var k=0; k<child.childNodes.length; k++) {
+						if (child.childNodes[k].nodeName == 'k') {
+							key = child.childNodes[k].firstChild.data;
+						}
+						else if (child.childNodes[k].nodeName == 'v') {
+							value = this._nodeToObject(child.childNodes[k].firstChild);
+						}
+					}
+					if (key != null && value != null) {
+						data[key] = value;
+						key = value = null;
+					}
+				}
+			}
+			return data;
+		}		
+	}
+
+	this.loadingFunction = function(){};
+	this.doneLoadingFunction = function(){};
+	var loadingTimeout;
+
+	// Sends a XMLHttpRequest to call the specified PHP function on the server
+	// * sRequestType is optional -- defaults to POST
+	this.call = function(sFunction, aArgs, sRequestType)
+	{
+		var i,r,postData;
+		if (document.body && xajaxWaitCursor)
+			document.body.style.cursor = 'wait';
+		if (xajaxStatusMessages == true) window.status = 'Sending Request...';
+		clearTimeout(loadingTimeout);
+		loadingTimeout = setTimeout("xajax.loadingFunction();",400);
+		if (xajaxDebug) this.DebugMessage("Starting xajax...");
+		if (sRequestType == null) {
+		   var xajaxRequestType = xajaxDefinedPost;
+		}
+		else {
+			var xajaxRequestType = sRequestType;
+		}
+		var uri = xajaxRequestUri;
+		var value;
+		switch(xajaxRequestType)
+		{
+			case xajaxDefinedGet:{
+				var uriGet = uri.indexOf("?")==-1?"?xajax="+encodeURIComponent(sFunction):"&xajax="+encodeURIComponent(sFunction);
+				if (aArgs) {
+					for (i = 0; i<aArgs.length; i++)
+					{
+						value = aArgs[i];
+						if (typeof(value)=="object")
+							value = this.objectToXML(value);
+						uriGet += "&xajaxargs[]="+encodeURIComponent(value);
+					}
+				}
+				uriGet += "&xajaxr=" + new Date().getTime();
+				uri += uriGet;
+				postData = null;
+				} break;
+			case xajaxDefinedPost:{
+				postData = "xajax="+encodeURIComponent(sFunction);
+				postData += "&xajaxr="+new Date().getTime();
+				if (aArgs) {
+					for (i = 0; i <aArgs.length; i++)
+					{
+						value = aArgs[i];
+						if (typeof(value)=="object")
+							value = this.objectToXML(value);
+						postData = postData+"&xajaxargs[]="+encodeURIComponent(value);
+					}
+				}
+				} break;
+			default:
+				alert("Illegal request type: " + xajaxRequestType); return false; break;
+		}
+		r = this.getRequestObject();
+		if (!r) return false;
+		r.open(xajaxRequestType==xajaxDefinedGet?"GET":"POST", uri, true);
+		if (xajaxRequestType == xajaxDefinedPost)
+		{
+			try
+			{
+				r.setRequestHeader("Method", "POST " + uri + " HTTP/1.1");
+				r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
+			}
+			catch(e)
+			{
+				alert("Your browser does not appear to  support asynchronous requests using POST.");
+				return false;
+			}
+		}
+		r.onreadystatechange = function()
+		{
+			if (r.readyState != 4)
+				return;
+			
+			if (r.status==200)
+			{
+				if (xajaxDebug) xajax.DebugMessage("Received:\n" + r.responseText);
+				if (r.responseXML && r.responseXML.documentElement)
+					xajax.processResponse(r.responseXML);
+				else {
+					var errorString = "Error: the XML response that was returned from the server is invalid.";
+					errorString += "\nReceived:\n" + r.responseText;
+					trimmedResponseText = r.responseText.replace( /^\s+/g, "" );// strip leading space
+					trimmedResponseText = trimmedResponseText.replace( /\s+$/g, "" );// strip trailing
+					if (trimmedResponseText != r.responseText)
+						errorString += "\nYou have whitespace in your response.";
+					alert(errorString);
+					document.body.style.cursor = 'default';
+					if (xajaxStatusMessages == true) window.status = 'Invalid XML response error';				
+				}
+			}
+			else {
+				if (xajax.responseErrorsForAlert.containsValue(r.status)) {
+					var errorString = "Error: the server returned the following HTTP status: " + r.status;
+					errorString += "\nReceived:\n" + r.responseText;
+					alert(errorString);
+				}
+				document.body.style.cursor = 'default';
+				if (xajaxStatusMessages == true) window.status = 'Invalid XML response error';								
+			}
+			
+			delete r;
+			r = null;
+		}
+		if (xajaxDebug) this.DebugMessage("Calling "+sFunction +" uri="+uri+" (post:"+ postData +")");
+		r.send(postData);
+		if (xajaxStatusMessages == true) window.status = 'Waiting for data...';
+		delete r;
+		return true;
+	}
+	
+	//Gets the text as it would be if it were being retrieved from
+	//the innerHTML property in the current browser
+	this.getBrowserHTML = function(html)
+	{
+		tmpXajax = this.$(this.workId);
+		if (!tmpXajax)
+		{
+			tmpXajax = document.createElement("div");
+			tmpXajax.setAttribute('id',this.workId);
+			tmpXajax.style.display = "none";
+			tmpXajax.style.visibility = "hidden";
+			document.body.appendChild(tmpXajax);
+		}
+		tmpXajax.innerHTML = html;
+		var browserHTML = tmpXajax.innerHTML;
+		tmpXajax.innerHTML = '';	
+		
+		return browserHTML;
+	}
+	
+	// Tests if the new Data is the same as the extant data
+	this.willChange = function(element, attribute, newData)
+	{
+		if (!document.body)
+		{
+			return true;
+		}
+		if (attribute == "innerHTML")
+		{
+			newData = this.getBrowserHTML(newData);
+		}
+		elementObject = this.$(element);
+		if (elementObject) {
+			var oldData;		
+			eval("oldData=this.$('"+element+"')."+attribute);
+			if (newData !== oldData)
+				return true;
+		}
+
+		return false;
+	}
+	
+	//Returns the source code of the page after it's been modified by xajax
+	this.viewSource = function()
+	{
+		return "<html>"+document.getElementsByTagName("HTML")[0].innerHTML+"</html>";
+	}
+	
+	//Process XML xajaxResponses returned from the request
+	this.processResponse = function(xml)
+	{
+		clearTimeout(loadingTimeout);
+		this.doneLoadingFunction();
+		if (xajaxStatusMessages == true) window.status = 'Processing...';
+		var tmpXajax = null;
+		xml = xml.documentElement;
+		if (xml == null)
+			return;
+		
+		var skipCommands = 0;
+		for (var i=0; i<xml.childNodes.length; i++)
+		{
+			if (skipCommands > 0) {
+				skipCommands--;
+				continue;
+			}
+			if (xml.childNodes[i].nodeName == "cmd")
+			{
+				var cmd;
+				var id;
+				var property;
+				var data;
+				var search;
+				var type;
+				var before;
+				var objElement = null;
+
+				for (var j=0; j<xml.childNodes[i].attributes.length; j++)
+				{
+					if (xml.childNodes[i].attributes[j].name == "n")
+					{
+						cmd = xml.childNodes[i].attributes[j].value;
+					}
+					else if (xml.childNodes[i].attributes[j].name == "t")
+					{
+						id = xml.childNodes[i].attributes[j].value;
+					}
+					else if (xml.childNodes[i].attributes[j].name == "p")
+					{
+						property = xml.childNodes[i].attributes[j].value;
+					}
+					else if (xml.childNodes[i].attributes[j].name == "c")
+					{
+						type = xml.childNodes[i].attributes[j].value;
+					}
+				}
+				if (xml.childNodes[i].childNodes.length > 1 && xml.childNodes[i].firstChild.nodeName == "#cdata-section")
+				{
+					data = "";
+					for (var j=0; j<xml.childNodes[i].childNodes.length; j++)
+					{
+						data += xml.childNodes[i].childNodes[j].data;
+					}
+				}
+				else if (xml.childNodes[i].firstChild && xml.childNodes[i].firstChild.nodeName == 'xjxobj') {
+					data = this._nodeToObject(xml.childNodes[i].firstChild);
+					objElement = "XJX_SKIP";
+				}
+				else if (xml.childNodes[i].childNodes.length > 1)
+				{
+					for (var j=0; j<xml.childNodes[i].childNodes.length; j++)
+					{
+						if (xml.childNodes[i].childNodes[j].childNodes.length > 1 && xml.childNodes[i].childNodes[j].firstChild.nodeName == "#cdata-section")
+						{
+							var internalData = "";
+							for (var k=0; k<xml.childNodes[i].childNodes[j].childNodes.length;k++)
+							{
+								internalData+=xml.childNodes[i].childNodes[j].childNodes[k].nodeValue;
+							}
+						} else {
+							var internalData = xml.childNodes[i].childNodes[j].firstChild.nodeValue;
+						}
+					
+						if (xml.childNodes[i].childNodes[j].nodeName == "s")
+						{
+							search = internalData;
+						}
+						if (xml.childNodes[i].childNodes[j].nodeName == "r")
+						{
+							data = internalData;
+						}
+					}
+				}
+				else if (xml.childNodes[i].firstChild)
+					data = xml.childNodes[i].firstChild.nodeValue;
+				else
+					data = "";
+				
+				if (objElement != "XJX_SKIP") objElement = this.$(id);
+				var cmdFullname;
+				try
+				{
+					if (cmd=="cc") {
+						cmdFullname = "addConfirmCommands";
+						var confirmResult = confirm(data);
+						if (!confirmResult) {
+							skipCommands = id;
+						}
+					}
+					if (cmd=="al")
+					{
+						cmdFullname = "addAlert";
+						alert(data);
+					}
+					else if (cmd=="js")
+					{
+						cmdFullname = "addScript/addRedirect";
+						eval(data);
+					}
+					else if (cmd=="jc")
+					{
+						cmdFullname = "addScriptCall";
+						var scr = id + '(';
+						if (data[0] != null) {
+							scr += 'data[0]';
+							for (var l=1; l<data.length; l++) {
+								scr += ',data['+l+']';
+							}
+						}
+						scr += ');';
+						eval(scr);
+					}
+					else if (cmd=="in")
+					{
+						cmdFullname = "addIncludeScript";
+						this.include(data);
+					}
+					else if (cmd=="as")
+					{
+						cmdFullname = "addAssign/addClear";
+						if (this.willChange(id,property,data))
+						{
+							eval("objElement."+property+"=data;");
+						}
+					}
+					else if (cmd=="ap")
+					{
+						cmdFullname = "addAppend";
+						eval("objElement."+property+"+=data;");
+					}
+					else if (cmd=="pp")
+					{
+						cmdFullname = "addPrepend";
+						eval("objElement."+property+"=data+objElement."+property);
+					}
+					else if (cmd=="rp")
+					{
+						cmdFullname = "addReplace";
+						this.replace(id,property,search,data)
+					}
+					else if (cmd=="rm")
+					{
+						cmdFullname = "addRemove";
+						this.remove(id);
+					}
+					else if (cmd=="ce")
+					{
+						cmdFullname = "addCreate";
+						this.create(id,data,property);
+					}
+					else if (cmd=="ie")
+					{
+						cmdFullname = "addInsert";
+						this.insert(id,data,property);
+					}
+					else if (cmd=="ia")
+					{
+						cmdFullname = "addInsertAfter";
+						this.insertAfter(id,data,property);
+					}
+					else if (cmd=="ci")
+					{
+						cmdFullname = "addCreateInput";
+						this.createInput(id,type,data,property);
+					}
+					else if (cmd=="ii")
+					{
+						cmdFullname = "addInsertInput";
+						this.insertInput(id,type,data,property);
+					}
+					else if (cmd=="iia")
+					{
+						cmdFullname = "addInsertInputAfter";
+						this.insertInputAfter(id,type,data,property);
+					}
+					else if (cmd=="ev")
+					{
+						cmdFullname = "addEvent";
+						property = this.addOnPrefix(property);
+						eval("this.$('"+id+"')."+property+"= function(){"+data+";}");
+					}
+					else if (cmd=="ah")
+					{
+						cmdFullname = "addHandler";
+						this.addHandler(id, property, data);
+					}
+					else if (cmd=="rh")
+					{
+						cmdFullname = "addRemoveHandler";
+						this.removeHandler(id, property, data);
+					}
+				}
+				catch(e)
+				{
+					if (xajaxDebug)
+						alert("While trying to '"+cmdFullname+"' (command number "+i+"), the following error occured:\n"
+							+ e.name+": "+e.message+"\n"
+							+ (id&&!objElement?"Object with id='"+id+"' wasn't found.\n":""));
+				}
+				delete objElement;
+				delete cmd;
+				delete cmdFullname;
+				delete id;
+				delete property;
+				delete search;
+				delete data;
+				delete type;
+				delete before;
+				delete internalData;
+				delete j;
+				delete k;
+			}	
+		}
+		delete xml;
+		delete i;
+		document.body.style.cursor = 'default';
+		if (xajaxStatusMessages == true) window.status = 'Done';
+	}
+}
+
+var xajax = new Xajax();
+xajaxLoaded = true;
